{"version":3,"sources":["components/CoinList/CoinList.module.css","components/Tabs/Tabs.module.css","App.module.css","utils/apis/Exceptions.js","utils/apis/fetch.js","utils/apis/methods.js","utils/apis/status.js","utils/apis/index.js","components/Tabs/index.jsx","utils/functions/index.js","components/CoinList/CoinStats.jsx","components/CoinList/Table.jsx","components/CoinList/Layout.jsx","components/CoinList/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","ApiException","msg","status_code","this","message","name","prototype","toString","controller","AbortController","signal","config","method","headers","Accept","getApiData","url","fetch","then","response","parsseStatus","status","text","undefined","JSON","parse","cancelApiData","abort","getAssets","getTradingPairsAllStats","Tabs","value","list","onClick","className","style","wrap","taplist","map","index","key","active","e","defaultProps","console","warn","MemoizedTabs","React","memo","number_formatting","number","parseFloat","Math","round","replace","CoinStats","close","high","low","open","time","volume","fluct","datetime","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","padStart","DateToString","Table","assets","data","isData","isError","TableHeader","width","TableBody","Loading","colSpan","item","split","Layout","view","changeTab","CoinList","state","errorHandler","error","setState","reduce","arr","id","res","KRW","filter","BTC","ETH","initData","Promise","all","forEach","catch","refreshData","setTimeout","trading_pairs_stats","Component","App","container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c94c80b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TableHeader\":\"CoinList_TableHeader__xgszP\",\"TableBody\":\"CoinList_TableBody__34aTl\",\"Table\":\"CoinList_Table__2grkB\",\"Loading\":\"CoinList_Loading__1JU-c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Tabs_wrap__2FwRE\",\"taplist\":\"Tabs_taplist__3KyjM\",\"active\":\"Tabs_active__1v0tH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","/**\n * API 에러\n * @param {Exception}} param0 message , status code\n */\nexport function ApiException({ msg, status_code }) {\n  this.message = msg;\n  this.name = \"ApiException\";\n  this.status_code = status_code;\n}\n/**\n * 문자열 출력 정의\n */\nApiException.prototype.toString = function () {\n  const { msg, name, status_code } = this;\n  return `${name} : CODE-${status_code} ${msg}`;\n};\n","import { GET } from \"./methods\";\nimport { parsseStatus } from \"./status\";\n\nconst controller = new AbortController();\nconst signal = controller.signal;\n\nconst BASIC_URL = `https://api.gopax.co.kr`;\n// const BASIC_URL = ``;\n\nconst CORS_URL = `https://cors-anywhere.herokuapp.com`;\n// const CORS_URL = ``;\n\n/**\n * fetch 설정\n */\nconst config = {\n  signal,\n  method: GET,\n  headers: {\n    \"Access-Control-Request-Method\": \"GET,HEAD\",\n    Accept: \"application/json\",\n  },\n};\n\nexport function cancel() {\n  controller.abort();\n}\n\n/**\n * fetch 을 통한 api 호출\n * @param {json} param0\n */\nexport const getApiData = ({ url = \"\" }) => {\n  // Default options are marked with *\n  return fetch(`${CORS_URL}/${BASIC_URL}${url}`, config)\n    .then((response) => {\n      // console.log(response);\n      const { status } = response;\n      return parsseStatus(status) ? response.text() : undefined;\n    }) // parses JSON response into native JavaScript objects\n    .then((text) => (text ? JSON.parse(text) : undefined));\n};\n","export const POST = \"POST\";\nexport const GET = \"GET\";\nexport const PUT = \"PUT\";\nexport const DELETE = \"DELETE\";\nexport const OPTIONS = \"OPTIONS\";\n","import { ApiException } from \"./Exceptions\";\n\n/**\n * API 에서 status code 분석\n */\nexport const parsseStatus = (status_code) => {\n  switch (status_code) {\n    case 200:\n      return true;\n    case 401:\n      throw new ApiException({\n        msg: \"잘못된 요청 - 요청 형식이 유효하지 않음\",\n        status_code,\n      });\n    case 403:\n      throw new ApiException({\n        msg: \"금지됨 - 요청한 리소스에 대한 접근 권한이 없음\",\n        status_code,\n      });\n    case 404:\n      throw new ApiException({ msg: \"찾을 수 없음\", status_code });\n    case 429:\n      throw new ApiException({\n        msg: \"요청 한도 초과 - API 호출 횟수 제한 초과\",\n        status_code,\n      });\n    case 500:\n      throw new ApiException({\n        msg: \"내부 서버 오류 - 서버에 문제가 발생함\",\n        status_code,\n      });\n    case 100:\n    case 106:\n      throw new ApiException({\n        msg:\n          \"자산 이름(Asset Name)이 올바르지 않음. 자산 목록 조회하기에서 전체 목록을 확인할 수 있습니다.\",\n        status_code,\n      });\n    case 103:\n      throw new ApiException({\n        msg: \"주문 종류(Type)가 올바르지 않음\",\n        status_code,\n      });\n    case 101:\n    case 104:\n      throw new ApiException({\n        msg:\n          \"거래 쌍(Trading Pair)이 올바르지 않음. 거래쌍 목록 조회하기에서 전체 목록을 확인할 수 있습니다.\",\n        status_code,\n      });\n    case 105:\n      throw new ApiException({\n        msg:\n          \"거래 쌍(Trading Pair)이 일시적으로 비활성화 되어있음. 거래쌍 목록 조회하기에서 전체 목록을 확인할 수 있습니다.\",\n        status_code,\n      });\n    case 107:\n      throw new ApiException({\n        msg: \"주문 수량이 올바르지 않음.\",\n        status_code,\n      });\n    case 108:\n      throw new ApiException({\n        msg: \"주문 가격이 올바르지 않음.\",\n        status_code,\n      });\n    case 201:\n      throw new ApiException({ msg: \"주문을 위한 잔고가 부족.\", status_code });\n    case 202:\n      throw new ApiException({\n        msg: \"주문 고유번호가 일치하지 않음.\",\n        status_code,\n      });\n    case 203:\n      throw new ApiException({\n        msg: \"주문 수량 X 주문 가격이 너무 큼.\",\n        status_code,\n      });\n    case 204:\n      throw new ApiException({\n        msg: \"현재 매수 주문이 허용되지 않음. 공지사항을 확인하십시오.\",\n        status_code,\n      });\n    case 206:\n      throw new ApiException({\n        msg: \"주문 옵션들이 서로 상충됨.\",\n        status_code,\n      });\n    case 10010:\n      throw new ApiException({\n        msg: \"출금지갑주소가 올바르지 않음.\",\n        status_code,\n      });\n    case 10041:\n      throw new ApiException({ msg: \"거래소가 올바르지 않음.\", status_code });\n    case 10155:\n      throw new ApiException({ msg: \"API키가 올바르지 않음.\", status_code });\n    case 10202:\n      throw new ApiException({ msg: \"주문 결제 수량이 부족.\", status_code });\n    default:\n      throw new ApiException({ msg: \"알수 없는 status 코드\", status_code });\n  }\n};\n","import { getApiData, cancel } from \"./fetch\";\n\n/**\n * api 취소\n */\nexport const cancelApiData = () => {\n  cancel();\n};\n\n/**\n * 자산 목록 조회하기\n    GOPAX 지갑에서 취급하는 모든 자산의 목록을 조회할 수 있습니다.\n */\nexport const getAssets = () => getApiData({ url: `/assets` });\n// const test = require(\"../functions/sample1.json\");\n// export const getAssets = () =>\n//   new Promise((resolver, rejects) => resolver(test));\n\n/**\n * 거래쌍 목록 조회하기\nGOPAX 거래소에서 취급하는 모든 거래쌍의 목록을 조회할 수 있습니다.\n */\nexport const getTradingPairs = () => getApiData({ url: `/trading-pairs` });\n/**\n * Ticker 조회하기\nGOPAX 거래쌍에 대해 최근 체결된 거래의 티커를 조회할 수 있습니다. 티커에 대한 설명은 다음을 참조할 수 있습니다. https://www.investopedia.com/ask/answers/12/what-is-a-stock-ticker.asp\n */\nexport const getTradingPairsTickets = ({ tradingPair }) =>\n  getApiData({ url: `/trading-pairs/${tradingPair}/ticker` });\n/**\n * Orderbook 조회하기\nGOPAX 거래쌍에 대해 오더북의 상태를 조회할 수 있습니다.\n */\nexport const getTradingPairsOrderbook = ({ tradingPair, level = undefined }) =>\n  getApiData({\n    url: `/trading-pairs/${tradingPair}/book${level ? `?level=${level}` : \"\"}`,\n  });\n\n// const test2 = require(\"../functions/sample1.json\");\n// export const getTradingPairsOrderbook = () =>\n//   new Promise((resolver, rejects) => resolver(test2));\n\n/**\n * 최근 체결 거래 조회하기\nGOPAX 거래쌍에 대해 최근 발생한 체결 거래들을 조회할 수 있습니다.\n */\nexport const getTradingPairsTrades = ({ tradingPair, ...params }) =>\n  getApiData({\n    url: `/trading-pairs/${tradingPair}/trades?${\n      params !== undefined\n        ? Object.entries(params)\n            .map(([key, value]) => `${key}=${value}`)\n            .join(\"&\")\n        : \"\"\n    }`,\n  });\n/**\n * 최근 24시간 통계 조회하기\nGOPAX 거래쌍에 대해 최근 24시간의 통계치를 조회할 수 있습니다.\n * @param {*} param0 \n */\nexport const getTradingPairsStats = ({ tradingPair }) =>\n  getApiData({ url: `/trading-pairs/${tradingPair}/stats` });\n/**\n * 모든 거래쌍의 최근 24시간 통계 조회하기\nGOPAX 모든 거래쌍에 대해 최근 24시간의 통계치를 조회할 수 있습니다.\n * @param {*} param0 \n */\nexport const getTradingPairsAllStats = () =>\n  getApiData({ url: `/trading-pairs/stats` });\n/**\n * 과거 기록 조회하기\nGOPAX 거래쌍에 대해 과거 통계치를 조회할 수 있습니다.\n * @param {*} param0 \n */\nexport const getTradingPairsCandles = ({ tradingPair, ...params }) =>\n  getApiData({\n    url: `/trading-pairs/${tradingPair}/candles?${\n      params !== undefined\n        ? Object.entries(params)\n            .map(([key, value]) => `${key}=${value}`)\n            .join(\"&\")\n        : \"\"\n    }`,\n  });\n","import React from \"react\";\nimport style from \"./Tabs.module.css\";\n\nexport function Tabs({ value, list = [], onClick }) {\n  return (\n    <div className={style.wrap}>\n      <ul className={style.taplist}>\n        {list.map(({ name }, index) => (\n          <li\n            key={index}\n            className={value === name ? style.active : \"\"}\n            onClick={(e) => onClick(name)}\n          >\n            <p>{name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nTabs.defaultProps = {\n  onClick: () => console.warn(\"onClick not defind\"),\n};\n\nexport const MemoizedTabs = React.memo(Tabs);\n","export function Log(...params) {\n  console.log(...params);\n  return { ...params };\n}\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport function number_formatting(number) {\n  number = parseFloat(number);\n  number = Math.round(number * 100) / 100;\n  return numberWithCommas(number);\n}\n\nexport function DateToString(time) {\n  let datetime = new Date(time);\n  const year = datetime.getFullYear().toString();\n  const month = datetime.getMonth().toString();\n  const date = datetime.getDate().toString();\n  const hour = datetime.getHours().toString();\n  const min = datetime.getMinutes().toString();\n  const sec = datetime.getSeconds().toString();\n\n  return `${year}-${month.padStart(2, \"0\")}-${date.padStart(\n    2,\n    \"0\"\n  )} ${hour.padStart(2, \"0\")}:${min.padStart(2, \"0\")}:${sec.padStart(2, \"0\")}`;\n}\n","import React from \"react\";\nimport { number_formatting, DateToString } from \"../../utils/functions\";\n\nexport default function CoinStats({\n  close,\n  high,\n  low,\n  name,\n  open,\n  time,\n  volume,\n}) {\n  // 변동값\n  const fluct = (Math.round((close - open) * 1e12) / 1e12 / open) * 100;\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{number_formatting(close)}</td>\n      <td>{number_formatting(fluct)}</td>\n      <td>{number_formatting(high)}</td>\n      <td>{number_formatting(low)}</td>\n      <td>{number_formatting(volume)}</td>\n      <td>{DateToString(time)}</td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport style from \"./CoinList.module.css\";\nimport CoinStats from \"./CoinStats\";\n\nexport default function Table({ assets, data, isData, isError }) {\n  return (\n    <div>\n      <div className={style.TableHeader}>\n        <table className={style.Table}>\n          <colgroup>\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"*\" />\n          </colgroup>\n          <thead>\n            <tr>\n              <th>이름</th>\n              <th>현재가</th>\n              <th>변동</th>\n              <th>최고가</th>\n              <th>최저가</th>\n              <th>거래대금</th>\n              <th>갱신시간</th>\n            </tr>\n          </thead>\n        </table>\n      </div>\n      <div className={style.TableBody}>\n        <table className={style.Table}>\n          <colgroup>\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"14%\" />\n            <col width=\"*\" />\n          </colgroup>\n          <tbody>\n            {\n              /* 로딩중 */\n              !isData && (\n                <tr>\n                  <td className={style.Loading} colSpan={7}>\n                    <p>loading</p>\n                  </td>\n                </tr>\n              )\n            }\n            {}\n            {\n              /* 정상 */\n              isData &&\n                isError === null &&\n                data !== undefined &&\n                data.map((item, index) => (\n                  <CoinStats\n                    key={index}\n                    {...item}\n                    name={`${assets[item.name.split(\"-\")[0]]} (${\n                      item.name.split(\"-\")[0]\n                    })`}\n                  />\n                ))\n            }\n            {\n              /* 비정상적인 출력 */\n              isData && isError !== null && (\n                <tr>\n                  <td className={style.Loading} colSpan={7}>\n                    <p>{`데이터 가져오기 실패 : ${\n                      isError.message || \"알수 없는 에러발생\"\n                    }`}</p>\n                  </td>\n                </tr>\n              )\n            }\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { MemoizedTabs } from \"../Tabs\";\n\nimport Table from \"./Table\";\n\nexport default function Layout({\n  view,\n  changeTab,\n  assets,\n  data,\n  isData,\n  isError,\n}) {\n  return (\n    <>\n      <MemoizedTabs\n        onClick={changeTab}\n        value={view}\n        list={[{ name: \"KRW\" }, { name: \"BTC\" }, { name: \"ETH\" }]}\n      />\n      <Table assets={assets} data={data} isData={isData} isError={isError} />\n    </>\n  );\n}\n","import React, { Component } from \"react\";\nimport { ApiException } from \"../../utils/apis/Exceptions\";\n\nimport {\n  getAssets,\n  getTradingPairsAllStats,\n  cancelApiData,\n} from \"../../utils/apis\";\nimport Layout from \"./Layout\";\n\nconst REFRESH_TIME = 1000 * 60;\nexport default class CoinList extends Component {\n  state = {\n    view: \"KRW\",\n    isData: false, // false : 데이터 가져오는중 , true : 요청완료\n    isError: null,\n  };\n\n  componentDidMount() {\n    this.initData().then((res) => {\n      const { isError } = this.state;\n      if (isError === null) {\n        setTimeout(this.refreshData, REFRESH_TIME);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    cancelApiData();\n  }\n\n  /**\n   * 에러 처리\n   */\n  errorHandler = (isError) => {\n    console.error(isError);\n    if (!(isError instanceof ApiException)) {\n      isError = new ApiException({ msg: \"알수없는에러\", status_code: null });\n    }\n    this.setState({ isError, isData: true });\n    return isError;\n  };\n\n  /**\n   * 코인 리스트\n   */\n  getAssets = () =>\n    getAssets()\n      .then((data) =>\n        data.reduce(\n          (memo, { id, name }, index, arr) => ({ ...memo, [id]: name }),\n          {}\n        )\n      )\n      .then((data) => ({ name: \"assets\", data }));\n\n  /**\n   * 24 시간 동안의 코인거래량\n   */\n  getTradingPairsAllStats = () =>\n    getTradingPairsAllStats().then((res) => ({\n      name: \"trading_pairs_stats\",\n      data: {\n        KRW: res.filter(({ name }) => {\n          const [, target] = name.split(\"-\");\n          return target === \"KRW\";\n        }),\n        BTC: res.filter(({ name }) => {\n          const [, target] = name.split(\"-\");\n          return target === \"BTC\";\n        }),\n        ETH: res.filter(({ name }) => {\n          const [, target] = name.split(\"-\");\n          return target === \"ETH\";\n        }),\n      },\n    }));\n\n  /**\n   * component 로드시 최초 실행\n   */\n  initData = () =>\n    Promise.all([this.getAssets(), this.getTradingPairsAllStats()])\n      .then((list) => {\n        list.forEach(({ name, data }) => this.setState({ [name]: data }));\n        this.setState({ isData: true });\n        return list;\n      })\n      .catch(this.errorHandler);\n\n  /**\n   *\n   */\n  refreshData = () => {\n    const { isError } = this.state;\n    if (isError === null) {\n      this.getTradingPairsAllStats()\n        .then(({ name, data }) =>\n          this.setState({ [name]: data }, () =>\n            setTimeout(this.refreshData, REFRESH_TIME)\n          )\n        )\n        .catch(this.errorHandler);\n    }\n  };\n\n  changeTab = (view) => this.setState({ view });\n\n  render() {\n    const { assets, view, trading_pairs_stats, isError, isData } = this.state;\n    const data =\n      trading_pairs_stats !== undefined ? trading_pairs_stats[view] : undefined;\n    return (\n      <Layout\n        isData={isData}\n        isError={isError}\n        assets={assets}\n        data={data}\n        view={view}\n        changeTab={this.changeTab}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport CoinList from \"./components/CoinList\";\n\nimport style from \"./App.module.css\";\n\nfunction App() {\n  return (\n    <div className={style.container}>\n      <CoinList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}