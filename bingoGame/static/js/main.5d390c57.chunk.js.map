{"version":3,"sources":["actions/index.js","components/BingoGameBoard/BingoGameBoardLayout.jsx","components/BingoGameBoard/index.jsx","components/GameLog/GameLogLayout.jsx","components/GameLog/index.jsx","components/Alert/AlertLayout.jsx","components/Alert/index.jsx","components/MainPage/MainPageLayOut.jsx","components/MainPage/index.jsx","App.js","serviceWorker.js","services/calculatorBingoGame.js","reducers/index.js","index.js"],"names":["RESET_GAMES","SELECT_NUMBER","CHANGE_TURN","SHOW_ALERT","CLOSE_ALERT","show_alert","message","type","BingoGameBoardLayout","playerId","bingoList","gameTurn","bingoButtonClick","callNumbers","className","Table","textAlign","celled","Body","_","length","fill","undefined","L","k","Math","floor","parseInt","v","Row","key","num","Cell","indexOf","onClick","e","defaultProps","BingoGameBoard","number","props","player","select_number","this","Component","connect","state","commands","dispatch","GameLogLayout","players","id","Fragment","map","o","bingo","JSON","stringify","value","GameLog","AlertLayout","is_show","close_alert","Modal","size","open","onClose","Content","Actions","Button","positive","icon","labelPosition","content","Alert","console","log","alert","MainPageLayOut","resetButtonClickHandler","Container","Grid","verticalAlign","Column","Header","as","color","MainPage","checkWinnerPlayer","prevProps","DEFAULT_WINS","result","filter","showAlert","resetButtonClick","prevState","snapshot","App","Boolean","window","location","hostname","match","calculatorBingoGame","bingoGameBoard","playerSelectNumber","resultCheckRow","toPairs","groupBy","flatMap","row_list","checkRow","resultCheckColumn","checkColumn","resultCheckCross","letfDiagonalList","range","rigthDiagonalList","checkLetfDiagonal","checkRigthDiagonal","concat","checkCross","gameStatus","alertStatus","bingoApp","combineReducers","action","Object","assign","chain","shuffle","push","getBingoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d390c57.chunk.js","sourcesContent":["export const RESET_GAMES = 'RESET_GAMES';\nexport const SELECT_NUMBER = 'SELECT_NUMBER';\nexport const CHANGE_TURN = 'CHANGE_TURN';\n\nexport const SHOW_ALERT = 'SHOW_ALERT';\nexport const CLOSE_ALERT = 'CLOSE_ALERT';\n\n\nexport function reset_games() {\n    return {\n        type: RESET_GAMES\n    };\n}\n\nexport function select_number(number) {    \n    return {\n        type: SELECT_NUMBER,\n        number\n    };\n}\n\nexport function change_turn() {\n    return {\n        type: CHANGE_TURN,\n    };\n}\n\nexport function show_alert(message) {\n    return {\n        type: SHOW_ALERT,\n        message\n    };\n}\nexport function close_alert() {\n    return {\n        type: CLOSE_ALERT\n    };\n}","import React from 'react'\nimport { Table } from 'semantic-ui-react'\nimport './BingoGameBoard.css'\nimport * as _ from \"fxjs2/Strict/index.js\";\nimport * as L from \"fxjs2/Lazy/index.js\";\n\n// window.L = L;\n// window._ = _;\n\nexport default function BingoGameBoardLayout({ playerId, bingoList, gameTurn, bingoButtonClick, callNumbers}) {\n    return (\n        <div className={`BingoGameBoard ${playerId === 1 ? \"left-player\" : \"rigth-player\"} ${(gameTurn) === playerId ? \"is-turn\" : \"\"}`}>\n            <p className=\"player-name\">{`player ${playerId + 1}`}</p>\n            <div className=\"player-game\">\n                <Table textAlign=\"center\" className={`bingo-game-board ${gameTurn === -1 ? \"\" :\"bingo-game-board-start\"}`} celled >\n                    <Table.Body>\n                        {\n                            _.go(\n                                bingoList.length !== 25 ? _.range(1, 26).fill(undefined) : bingoList,\n                                L.entries,\n                                _.groupBy(([k, v]) => Math.floor(parseInt(k) / 5)),\n                                L.entries,\n                                L.flatMap(([k, v]) =>\n                                    <Table.Row key={k * 10}>\n                                        {\n                                            _.map(\n                                                ([_, num]) => (\n                                                    <Table.Cell \n                                                        className={callNumbers.indexOf(num) !== -1 ? \"selected\" : \"\" }\n                                                        key={_} \n                                                        onClick={e => bingoButtonClick(num)}>\n                                                        {num}\n                                                    </Table.Cell>\n                                                ),\n                                                v\n                                            )\n                                        }\n                                    </Table.Row>\n                                ),\n                                _.takeAll\n                            )\n                        }\n                    </Table.Body>\n                </Table>\n            </div>\n        </div>\n    )\n}\nBingoGameBoardLayout.defaultProps = {\n    playerId : 1,\n    bingoList : [],\n}","import React, { Component } from 'react'\nimport BingoGameBoardLayout from './BingoGameBoardLayout'\nimport { select_number, show_alert } from '../../actions'\nimport { connect } from 'react-redux';\n\nexport class BingoGameBoard extends Component {\n    /**\n     * 버튼클릭시 이벤트 함수\n     */\n    bingoButtonClick = (number) => {\n        const { gameTurn, callNumbers } = this.props\n        const { playerId, } = this.props.player;\n        if (number === undefined || gameTurn === -1 ) return false;\n        if (playerId !== gameTurn){\n            this.props.show_alert('해당 차례가 아닙니다.')\n            return false;\n        }\n        if (callNumbers.indexOf(number) !== -1){\n            return false;\n        }\n        return this.props.select_number(number);\n    }\n\n\n    render() {\n        // console.log(this.props.callNumbers);\n        const { playerId, bingoList} = this.props.player;\n        const { gameTurn } = this.props\n        return (\n            <BingoGameBoardLayout\n                // 플레이어 1 ,2\n                playerId={playerId}\n                // 플레이어들에서 할당된 빙고판 번호\n                bingoList={bingoList}\n                // 플레이어 순서\n                gameTurn={gameTurn}\n                // 플레이어들이 선택한 값들\n                callNumbers={this.props.callNumbers}\n                // 버튼클릭시 이벤트 처리\n                bingoButtonClick={this.bingoButtonClick}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        /**\n         * 플레이어가 선택한 번호 리스트\n         */\n        callNumbers: state.commands.callNumbers\n    };\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        /**\n         * 플레이어가 선택한 번호들을 저장\n         */\n        select_number: (number) => dispatch(select_number(number)),\n\n        show_alert: (message) => dispatch(show_alert(message)),\n    }\n}\n\nBingoGameBoard = connect(mapStateToProps, mapDispatchToProps)(BingoGameBoard);\nexport default BingoGameBoard\n","import React from 'react'\nimport _ from 'lodash'\nimport './GameLog.css'\nexport default function GameLogLayout({ gameTurn, players }) {\n    return (\n        <div id=\"GameLog\">\n            {\n                (gameTurn === -1) ? null :\n                <React.Fragment>\n                        <p>Turn : {(gameTurn === -1) ? `` : `${gameTurn + 1}`}</p>\n                        {\n                            _(players)\n                                .map((o, key) =>\n                                    <React.Fragment key={key}>\n                                        <p>\n                                            {`player ${o.playerId + 1}`}\n                                        </p>\n                                        <p>\n                                            bingo : {o.bingo ? JSON.stringify(o.bingo) : \"\"}\n                                        </p>\n                                    </React.Fragment>\n                                ).value()\n                        }\n                </React.Fragment>\n            }\n            \n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nimport GameLogLayout from './GameLogLayout'\nexport class GameLog extends Component {\n    render() {\n        return (\n            <GameLogLayout\n                gameTurn={this.props.gameTurn}\n                players={this.props.players}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        gameTurn: state.commands.gameTurn,\n        players: state.commands.players,\n    };\n}\nGameLog = connect(mapStateToProps)(GameLog);\nexport default GameLog\n","import React from 'react'\nimport { Button, Modal } from 'semantic-ui-react'\n\n\nexport default function AlertLayout({ is_show, close_alert , message }) {\n    return (\n        <Modal size={`mini`} open={is_show} onClose={close_alert}>\n            <Modal.Content>\n                <p>{message}</p>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    onClick={close_alert}\n                    positive\n                    icon='checkmark'\n                    labelPosition='right'\n                    content='확인'\n                />\n            </Modal.Actions>\n        </Modal>\n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nimport { show_alert, close_alert } from '../../actions'\n\nimport AlertLayout from './AlertLayout'\n\nexport class Alert extends Component {\n    render() {\n        console.log(this.props);\n        \n        return (\n            <AlertLayout\n                is_show={this.props.is_show}\n                message={this.props.message}\n                close_alert={this.props.close_alert}\n            />\n        )\n    }\n}\nlet mapStateToProps = (state) => {\n    return {\n        is_show: state.alert.is_show,\n        message: state.alert.message,\n    };\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        close_alert: () => dispatch(close_alert()),\n        show_alert: (message) => dispatch(show_alert(message)),\n    }\n}\nAlert = connect(mapStateToProps, mapDispatchToProps)(Alert);\nexport default Alert","import React from 'react'\nimport { Grid, Header, Container, Button,  } from 'semantic-ui-react'\nimport BigoGameBoard from '../BingoGameBoard'\nimport GameLog from '../GameLog'\nimport './MainPage.css'\nimport Alert from '../Alert'\n\nexport default function MainPageLayOut({ gameTurn, players, resetButtonClickHandler}) {\n    return (\n        <Container>\n            <Alert/>\n            <Grid id=\"MainPage\" textAlign='center' verticalAlign='middle'>\n                <Grid.Column className=\"content\">\n                    <Grid className=\"title\">\n                        <Grid.Column >\n                            <Header as='h1' color='teal' textAlign='center'>\n                                Bingo Game\n                            </Header>\n                        </Grid.Column>\n                    </Grid>\n                    <Grid className=\"content\">\n                        <BigoGameBoard\n                            gameTurn={gameTurn}\n                            player={players[0]}\n                        />\n                        <div className=\"status\">\n                            <div className=\"log\">\n                                <GameLog/>\n                            </div>\n                            <div className=\"buttons\">\n                                <Button \n                                    onClick={resetButtonClickHandler}\n                                    size=\"massive\" color=\"teal\"\n                                    >\n                                    {gameTurn === -1 ? `Game Start` : `Game Reset`}\n                                </Button>\n                            </div>\n                        </div>\n                        <BigoGameBoard\n                            gameTurn={gameTurn}\n                            player={players[1]}\n                        />\n                    </Grid>\n                </Grid.Column>\n                \n            </Grid>\n        </Container>\n        \n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { reset_games, show_alert, close_alert } from '../../actions'\nimport MainPageLayout from './MainPageLayOut';\nimport _ from 'lodash'\n\nexport class MainPage extends Component {\n    static propTypes = {\n\n    }\n\n    componentDidMount(){\n        // console.log(this.props);\n    }\n\n    checkWinnerPlayer = (prevProps) => {\n        const { players, callNumbers ,DEFAULT_WINS } = this.props;\n         \n        // console.log(players, DEFAULT_WINS);\n        // console.log(prevProps.callNumbers, callNumbers);\n\n        if (prevProps.callNumbers.length === callNumbers.length){\n            const result = _(players)\n                .filter(o => o.bingo.length >= DEFAULT_WINS)\n                .value()\n            if (result.length === 0) return false;\n            else if (result.length === 1) {\n                this.props.showAlert(`${result[0].playerId + 1}P가 빙고를 완성했습니다.`);\n                this.props.resetButtonClick();\n            }\n            else if (result.length > 1) {\n                this.props.showAlert(`무승부 입니다.`);\n                this.props.resetButtonClick();\n            }\n        }\n        \n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.checkWinnerPlayer(prevProps)\n    }\n\n    render() {\n        return <MainPageLayout\n            gameTurn={this.props.gameTurn}\n            players={this.props.players}\n            resetButtonClickHandler={this.props.resetButtonClick}\n        />\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        gameTurn: state.commands.gameTurn,\n        players: state.commands.players,\n        callNumbers: state.commands.callNumbers,\n        DEFAULT_WINS: state.commands.DEFAULT_WINS,\n    };\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        resetButtonClick: () => dispatch(reset_games()),\n        showAlert: (message) => dispatch(show_alert(message)),\n    }\n}\n\nMainPage = connect(mapStateToProps, mapDispatchToProps)(MainPage);\nexport default MainPage\n","import React from 'react';\nimport MainPage from './components/MainPage'\n\n\nfunction App() {\n  return (\n    <MainPage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import _ from 'lodash'\n\n\n\n\n/**\n * 수직행 빙고수 계산 알고리즘\n * @param {*} bingoGameBoard \n * @param {*} playerSelectNumber \n */\nfunction checkColumn(bingoGameBoard, playerSelectNumber) {\n    return _(bingoGameBoard)\n        .toPairs()\n        .groupBy(([k, v]) => parseInt(k) % 5)\n        .map((v) => _.flatMap(v, ([k, v]) => v))\n        .filter( row_list => {\n            return _(playerSelectNumber)\n                .filter(number => row_list.indexOf(number) !== -1)\n                .value()\n                .length === 5\n        })\n        .value()\n}\n\n/**\n * 가로행 빙고수 계산 알고리즘\n * @param {*} bingoGameBoard \n * @param {*} playerSelectNumber \n */\nfunction checkRow(bingoGameBoard, playerSelectNumber) {\n    return _(bingoGameBoard)\n        .toPairs()\n        .groupBy(([k, v]) => Math.floor(parseInt(k) / 5))\n        .map((v) => _.flatMap(v, ([k, v]) => v))\n        .filter(row_list => {\n            return _(playerSelectNumber)\n                .filter(number => row_list.indexOf(number) !== -1)\n                .value()\n                .length === 5\n        })\n        .value()\n}\n\n/**\n * 대각선 빙고 체크\n * @param {*} bingoGameBoard \n * @param {*} playerSelectNumber \n */\nfunction checkCross(bingoGameBoard, playerSelectNumber) {\n    // 0 ~ 25 까지의 좌측 대각선 ( \\ ) 리스트\n    const letfDiagonalList = _(_.range(25)).filter(o => o%6 === 0).value();\n    // 0 ~ 25 까지의 우측 대각선 ( / ) 리스트\n    const rigthDiagonalList = _(_.range(25)).filter(o => o%4 === 0).value();\n\n    const checkLetfDiagonal = _(bingoGameBoard)\n        .filter((v, k) => letfDiagonalList.indexOf(k) !== -1 )\n        .filter((v, k) => playerSelectNumber.indexOf(v) !== -1 )\n        .value()        \n\n\n    const checkRigthDiagonal = _(bingoGameBoard)\n        .filter((v, k) => rigthDiagonalList.indexOf(k) !== -1)\n        .filter((v, k) => playerSelectNumber.indexOf(v) !== -1)\n        .value()\n        \n    // console.log(checkLetfDiagonal, checkRigthDiagonal);\n\n    var result = _.concat(\n        checkLetfDiagonal.length === 5 ? [checkLetfDiagonal] : [],\n        checkRigthDiagonal.length === 5 ? [checkRigthDiagonal] : []\n    )    \n\n    return result;\n}\n\n/**\n * 해당유저의 빙고여부 확인\n * @param {*} bingoGameBoard \n * @param {*} playerSelectNumber \n */\nexport default function calculatorBingoGame( bingoGameBoard , playerSelectNumber ) {\n    if( !bingoGameBoard || !playerSelectNumber ) return false;\n    \n    const resultCheckRow = checkRow(bingoGameBoard, playerSelectNumber)\n    const resultCheckColumn = checkColumn(bingoGameBoard, playerSelectNumber)\n    const resultCheckCross = checkCross(bingoGameBoard, playerSelectNumber)\n\n    // console.log(resultCheckRow, resultCheckColumn, resultCheckCross);\n    \n\n    return _.concat(resultCheckRow ,resultCheckColumn ,resultCheckCross);\n}","import { combineReducers } from 'redux';\nimport { RESET_GAMES, SELECT_NUMBER, CHANGE_TURN} from '../actions'\nimport { SHOW_ALERT, CLOSE_ALERT } from '../actions'\n\nimport _ from \"lodash\";\nimport getBingoList from '../services/calculatorBingoGame'\n\n/**\n * 게임 플레이어\n */\nconst DEFAULT_PLAYERS = 2\n/**\n * 승리를 만족하는 빙고 갯수\n */\n// const DEFAULT_WINS = 1\n\nconst gameStatus = {\n    DEFAULT_WINS : 5,\n    /**\n     * 각 게임화면의 플레이어 상테 정보 \n     * [\n     *      {playerId : 0 , bingoList : [1,2,3 ... 25] ,  }\n     * ]\n     */\n    players: [\n        { playerId: 0, bingoList: [], bingo: [] },\n        { playerId: 1, bingoList: [], bingo: [] }\n    ],\n    /**\n     * 플레이어가 부른 숫자정보\n     */\n    callNumbers : [],\n    \n    /**\n     * -1 : 시작전\n     * 0 ~ DEFAULT_PLAYERS -1: 해당아이디 차례\n     */\n    gameTurn : -1,\n};\n\nconst alertStatus = {\n    is_show : false,\n    message : \"\",\n}\n\nconst alert = (state = alertStatus , action)=>{\n    switch (action.type) {\n        case SHOW_ALERT:\n            return Object.assign({}, state, {\n                is_show: !state.is_show,\n                message: action.message,\n            })\n        case CLOSE_ALERT:\n            return Object.assign({}, state, {\n                is_show: !state.is_show,\n                message: \"\",\n            })\n        default:\n            return state;\n    }\n}\n\n\n\n\nconst commands = (state = gameStatus, action) => {\n    switch (action.type) {\n        case RESET_GAMES:\n            return Object.assign({}, state, {\n                players: _.chain()\n                    .range(DEFAULT_PLAYERS)\n                    .map(playerId =>({\n                        playerId,\n                        bingoList: \n                            _(_.range(1, 26))\n                            .shuffle()\n                            .value(),\n                        bingo : [],\n                    }))\n                .value(),\n                gameTurn: 0,\n                callNumbers: [],\n            }) \n        case SELECT_NUMBER:\n            let callNumbers = state.callNumbers;\n            callNumbers.push(action.number)            \n            return Object.assign({}, state, {\n                callNumbers,\n                gameTurn: (state.gameTurn + 1) % DEFAULT_PLAYERS,\n                players : _(state.players).map(o => {                    \n                    return {\n                        ...o,\n                        bingo: getBingoList(o.bingoList, callNumbers)\n                    }\n                }).value()\n            })\n        \n        case CHANGE_TURN:\n            return Object.assign({}, state, {\n                gameTurn: (state.gameTurn +1) % DEFAULT_PLAYERS\n            })\n        default:\n            return state;\n    }\n}\n\nconst bingoApp = combineReducers({\n    commands,\n    alert\n});\n\nexport default bingoApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport bingoApp from './reducers';\n\nconst store = createStore(bingoApp);\n\n\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>,\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}