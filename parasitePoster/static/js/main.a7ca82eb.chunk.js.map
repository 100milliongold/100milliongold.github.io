{"version":3,"sources":["img/parasite.logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","loading","detection_options","withLandmarks","withDescriptors","videoConstraints","facingMode","make","a","getVideo","video","getImage","image","canvas","createCanvas","width","height","ctx","getContext","faceapi","ml5","faceApi","modelReady","console","log","setState","detect","gotResults","err","result","detections","fillStyle","fillRect","drawImage","length","drawEyeBox","_","L","parts","leftEye","rightEye","list","maxXpoint","_x","x","maxYpoint","_y","y","boxWidth","boxHeight","beginPath","stroke","closePath","videoElement","vidioRef","current","setAttribute","Promise","resolve","reject","temp_image","Image","src","Logo","onload","w","h","canvasRef","createRef","webcamRef","this","className","audio","ref","screenshotFormat","style","display","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7ca82eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/parasite.logo.c88fbf2d.png\";","import React, { Component, createRef } from \"react\";\nimport ml5 from \"ml5/dist/ml5.min.js\";\nimport * as L from \"fxjs2/Lazy/index.js\";\nimport * as _ from \"fxjs2/Strict/index.js\";\nimport Webcam from \"react-webcam\";\nimport Logo from \"./img/parasite.logo.png\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.vidioRef = createRef();\n    this.canvasRef = createRef();\n    this.webcamRef = createRef();\n\n    this.faceapi = null;\n    this.video = null;\n    this.detections = null;\n    this.width = 600;\n    this.height = 800;\n    this.canvas = null;\n    this.ctx = null;\n  }\n\n  state = {\n    loading: true\n  };\n\n  // relative path to your models from window.location.pathname\n  detection_options = {\n    withLandmarks: true,\n    withDescriptors: false\n    // Mobilenetv1Model: \"models\",\n    // FaceLandmarkModel: \"models\",\n    // FaceRecognitionModel: \"models\"\n  };\n\n  videoConstraints = {\n    facingMode: \"user\"\n  };\n\n  make = async () => {\n    // get the video\n    // get the video\n    this.video = await this.getVideo();\n    this.image = await this.getImage();\n\n    this.canvas = this.createCanvas(this.width, this.height);\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    this.faceapi = ml5.faceApi(\n      this.video,\n      this.detection_options,\n      this.modelReady\n    );\n  };\n\n  modelReady = () => {\n    console.log(\"ready!\");\n    this.setState({ loading: false });\n    this.faceapi.detect(this.gotResults);\n  };\n\n  gotResults = (err, result) => {\n    if (err) {\n      console.log(err);\n      return;\n    }\n\n    // console.log(result)\n    this.detections = result;\n\n    // Clear part of the canvas\n    this.ctx.fillStyle = \"#000000\";\n    this.ctx.fillRect(0, 0, this.width, this.height);\n\n    this.ctx.drawImage(this.video, 0, 0, this.width, this.height);\n    \n    this.ctx.drawImage(this.image, 0, this.height - 216, 583, 216);\n\n    if (this.detections) {\n      if (this.detections.length > 0) {\n        this.drawEyeBox(this.detections);\n        // this.drawLogo();\n      }\n    }\n    this.faceapi.detect(this.gotResults);\n  };\n\n\n  drawEyeBox = (detections) => {\n    const X_WEIGHT = 0.3,\n      Y_WEIGHT = 3;\n    const { x, y, boxWidth, boxHeight } = _.go(\n      detections,\n      L.map(({ parts: { leftEye, rightEye } }) => [leftEye, rightEye]),\n      L.deepFlat,\n      _.takeAll,\n      (list) => {\n        const maxXpoint = _.maxBy(({ _x }) => _x, list)._x;\n        let x = _.minBy(({ _x }) => _x, list)._x;\n        x = x - x * X_WEIGHT;\n        const maxYpoint = _.maxBy(({ _y }) => _y, list)._y;\n        const y = _.minBy(({ _y }) => _y, list)._y - Y_WEIGHT;\n        let boxWidth = maxXpoint - x;\n        boxWidth = boxWidth + boxWidth * X_WEIGHT;\n        const boxHeight = maxYpoint - y + Y_WEIGHT;\n        return { x, y, boxWidth, boxHeight };\n      },\n    );\n    this.ctx.beginPath();\n    this.ctx.fillStyle = \"rgb(0,0,0)\";\n    this.ctx.fillRect(x, y, boxWidth, boxHeight);\n    this.ctx.stroke();\n    this.ctx.closePath();\n  };\n\n  // Helper Functions\n  getVideo = async () => {\n    // Grab elements, create settings, etc.\n    const videoElement = this.vidioRef.current.video;\n    videoElement.setAttribute(\"style\", \"display: none;\");\n    videoElement.width = this.width;\n    videoElement.height = this.height;\n    return videoElement;\n  };\n\n  getImage = () => new Promise((resolve , reject) => {\n    const temp_image = new Image();\n    temp_image.src = Logo;\n    temp_image.onload = () => {\n      resolve(temp_image);\n    };\n  })\n\n  createCanvas = (w, h) => {\n    const canvas = this.canvasRef.current;\n    return canvas;\n  };\n\n  componentDidMount() {\n    this.make();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <video id=\"video\" ref={this.vidioRef}></video> */}\n        {this.state.loading ? <p>Loading ......</p> : null}\n        <Webcam\n          audio={false}\n          height={this.height}\n          ref={this.vidioRef}\n          screenshotFormat=\"image/jpeg\"\n          width={this.width}\n          videoConstraints={this.videoConstraints}\n          style={{ display: \"none\" }}\n        />\n        <canvas\n          id=\"canvas\"\n          ref={this.canvasRef}\n          width={this.width}\n          height={this.height}\n        ></canvas>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}