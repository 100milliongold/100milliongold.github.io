{"pages":[{"title":"Portfolio","text":"JaeEok KimProgrammer, Xiilab 재직중 사용 기술Java, Spring, html5, css3, react.js 프로젝트 투입 이력1. 삼성 SDS 빅데이터 기반 실시간 배터리 수치 계산 플랫폼 과제수행 (17.08 ~ 17.12) Hbase을 통하여 대용량 수치 데이터 저장 Hbase 저장된 데이터를 토대로 R language 을 통하여 계산 웹 화면을 통한 데이터 가시화 2. KISTI 빅데이터 플랫폼 운영관리 시스템 고도화 과제수행 (17.12 ~ 19.04) LustreFS on Hadoop 을 통한 기존 Hdfs 보다 빠른 빅데이터 저장시스템 구축 Ambari Custom Service 을 통하여 손쉬운 LustreFS Node 구성가능 Monitoring System (chameleon) 을 구축하여 Yarn job 모니터링 가능 Ambari Custom View 제작으로 openldap, LustreFS을 관리하는 플랫폼 개발 3. 도커 기반 GPU 자원할당 솔루션 개발 (18.04 ~ ) GPU 자원 관리시스템을 개발하여 사용자들에게 GPU 자원을 제공 및 관리 일정관리를 통하여 사용자가 원하는 시간에 도커 컨테이너를 제공 Docker API 을 통하여 사용자가 머신러닝 개발을 할수 있는 환경제공 Time Series Database(InfluxDB)을 연동하여 실시간 GPU, 시스템 사용량을 시각화 Education 천안쌍용고등학교 졸업 한국교통대학교 컴퓨터과학과 졸업","link":"/portfolio/index.html"},{"title":"ppts","text":"2019년 2월 세미나 var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/pdf.css' : 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/paper.min.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); 2019년 2월 세미나 자료 순서 Graphql - Spring 연동 Full Text index 실습 Graphql - Spring 연동 Graphql 이란? GraphQL은 API를 위한 쿼리 언어 입니다. query { account(id: \"1\") { username email firstName lastName friends { firstName username } } } Graphql vs restapi 연습해보기 https://graphql-tryout.herokuapp.com/graphql Spring에 연동해봅시다. 예제소스 다운로드 git clone https://github.com/spring-guides/gs-accessing-data-mysql.git docker 생성 docker run -d \\ --name spring-jpa-test \\ -e MYSQL_ROOT_PASSWORD=root \\ -e MYSQL_DATABASE=db_example \\ -e MYSQL_USER=springuser \\ -e MYSQL_PASSWORD=ThePassword \\ -p 3306:3306 \\ mariadb:latest \\ --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci application.property 수정 spring.jpa.hibernate.ddl-auto=update pom.xml dependency 추가 io.leangen.graphql spqr 0.9.9 User.java 수정 @Entity // This tells Hibernate to make a table out of this class public class User { @Id @GeneratedValue(strategy=GenerationType.AUTO) @GraphQLQuery(name = \"id\", description = \"A user's id\") private Integer id; @GraphQLQuery(name = \"name\", description = \"A user's name\") private String name; @GraphQLQuery(name = \"email\", description = \"A user's email\") private String email; @Lob @GraphQLQuery(name = \"comment\", description = \"user massage\") private String comment; @Temporal(TemporalType.TIMESTAMP) private Date create_time; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getComment() { return comment; } public void setComment(String comment) { this.comment = comment; } public Date getCreate_time() { return create_time; } public void setCreate_time(Date create_time) { this.create_time = create_time; } } MainService.java 추가 @Service public class MainService { private final UserRepository userRepository; public MainService(UserRepository userRepository) { this.userRepository = userRepository; } @GraphQLQuery(name = \"users\") public List getUsers() { return (List)userRepository.findAll(); } @GraphQLQuery(name = \"user\") public Optional getUserById(@GraphQLArgument(name = \"id\") Integer id) { return userRepository.findById(id); } @GraphQLMutation(name = \"saveUser\") public User saveUser(@GraphQLArgument(name = \"user\") User user) { return userRepository.save(user); } @GraphQLMutation(name = \"deleteUser\") public void deleteUser(@GraphQLArgument(name = \"id\") Integer id) { userRepository.deleteById(id); } } MainController.java 수정 @RestController public class MainController { private final GraphQL graphQL; public MainController (MainService mainService) { GraphQLSchema schema = new GraphQLSchemaGenerator() .withResolverBuilders( new AnnotatedResolverBuilder()) .withOperationsFromSingleton(mainService) .withValueMapperFactory(new JacksonValueMapperFactory()) .generate(); graphQL = GraphQL.newGraphQL(schema).build(); } @PostMapping(value = \"/graphql\", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE) @ResponseBody public Map graphql(@RequestBody Map request, HttpServletRequest raw) { ExecutionResult executionResult = graphQL.execute(ExecutionInput.newExecutionInput() .query(request.get(\"query\")) .operationName(request.get(\"operationName\")) .context(raw) .build()); return executionResult.toSpecification(); } } Spring 실행 cd gs-accessing-data-mysql mvn spring-boot:run 예제 데이터 삽입 wget https://raw.githubusercontent.com/gadian88/graphql-test/master/generatedata.sql cat generatedata.sql | docker exec -i spring-jpa-test /usr/bin/mysql -u root --password=root db_example 페이징 처리를 합시다 UserRepository.java 수정 public interface UserRepository extends CrudRepository { Page findAll(Pageable pageable); } MainService.java 수정 @GraphQLQuery(name = \"users\") public List getUsers( @GraphQLArgument(name = \"page\") Integer page, @GraphQLArgument(name = \"size\") Integer size ) { return userRepository.findAll(PageRequest.of(page, size, Sort.by(\"id\"))).getContent(); } Full Text index 실습 Full Text Index 란? Full text index는 full text serach를 위한 index입니다. 기존의 텍스트 검색 SELECT * FROM user WHERE comment LIKE '%test%' BUT 이런식으로 쿼리를 만들어 사용한다고 하면 모든 행의 문자열을 검색하기 때문에 시간이 오래 걸립니다. 그럼 ElasticSearch 을 쓰죠 하지만 소규모로 서비스를 한다면? FULLTEXT 검색 방식 자연어 검색(natural search) 검색 문자열을 단어 단위로 분리한 후, 해당 단어 중 하나라도 포함되는 행을 찾는다. 불린 모드 검색(boolean mode search) 검색 문자열을 단어 단위로 분리한 후, 해당 단어가 포함되는 행을 찾는 규칙을 추가적으로 적용하여 해당 규칙에 매칭되는 행을 찾는다. mysql 에서 간단하게 Full Text Index 을 설정할수 있습니다. ALTER TABLE user ADD FULLTEXT(comment); 이젠 설정이 끝났으니 자연어 검색을 합니다. SELECT name, email, comment , match(comment) against(' 그들의 관현악이며') as score FROME db_example.user WHERE match(comment) against(' 그들의 관현악이며'); 불린 모드 검색(boolean mode search) 이란? 검색의 정확도에 따라 결과가 정렬되지 않는다. 구문 검색이 가능하다 필수(+), 예외(-), 부분(*) 연산자를 사용할 수 있다 한번 불린 모드 검색을 해봅시다. SELECT name, email, comment FROME db_example.user WHERE match(comment) against(' \"그들의 관현악이며\" -test' in boolean mode); 감사합니다. // More info about config & dependencies: // - https://github.com/hakimel/reveal.js#configuration // - https://github.com/hakimel/reveal.js#dependencies Reveal.initialize({ dependencies: [ { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/marked.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/markdown.min.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/notes/notes.js', async: true }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/highlight/highlight.min.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } } ] });","link":"/presentation/graphql.html"},{"title":"Presentation","text":"발표자료 graphQL , fulltext index # influxdb , telegraf 로 모니터링 시스템 구축 # reveal.js 로 ppt 제작 #","link":"/presentation/index.html"},{"title":"ppts","text":"influxdb var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/pdf.css' : 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/paper.min.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); Influxdb 을 통한 모니터링 시스템 구축 상황 각 서버들의 리소스들을 실시간으로 모니터링 과거 이력을 살펴볼수 있게 저장 및 관리 오픈소스로 구현 해결방안 방안 1 : 상관없으니 RDBMS로 하자 방안 2 : hbase 을 이용하자 방안 3 : 파일을 통하여 로그을 적재하자 해결방안으로 찾은 방안이 Time series database(시계열 데이터베이스) 시계열 데이터베이스? 시계열 데이터베이스(TSDB)는 시계열 데이터, 시간별 지수화된 번호 배열(Datetime 또는 Datetime 범위)의 처리에 최적화된 소프트웨어 시스템이다. TSDB 순위 리소스 수집 시스템 구성도 docker-compose.yml 작성 version: '2.1' services: influxdb: container_name: influxdb image: influxdb:latest ports: - '8086:8086' environment: - INFLUXDB_DB=alio - INFLUXDB_ADMIN_USER=root - INFLUXDB_ADMIN_PASSWORD=root - INFLUXDB_USER=telegraf - INFLUXDB_USER_PASSWORD=secretpassword networks: influx: ipv4_address: 10.18.1.2 telegraf: container_name: telegraf image: telegraf:latest ports: - '8125:8125/udp' - '8092:8092/udp' - '8094:8094' networks: influx: ipv4_address: 10.18.1.3 extra_hosts: - \"influxdb:10.18.1.2\" grafana: container_name: grafana image: grafana/grafana:latest ports: - '3000:3000' environment: - GF_SECURITY_ADMIN_PASSWORD=root networks: influx: ipv4_address: 10.18.1.4 extra_hosts: - \"influxdb:10.18.1.2\" networks: influx: driver: bridge ipam: config: - subnet: 10.18.1.0/16 gateway: 10.18.1.1 docker 생성 및 확인 docker-compose up -d docker ps telegraf.conf 가져오기 docker cp telegraf:/etc/telegraf/telegraf.conf ~/telegraf.conf telegraf.conf 수정 [[outputs.influxdb]] ## The full HTTP or UDP URL for your InfluxDB instance. ## ## Multiple URLs can be specified for a single cluster, only ONE of the ## urls will be written to each interval. # urls = [\"unix:///var/run/influxdb.sock\"] # urls = [\"udp://127.0.0.1:8089\"] urls = [\"http://10.18.1.2:8086\"] ## The target database for metrics; will be created as needed. database = \"alio\" ## If true, no CREATE DATABASE queries will be sent. Set to true when using ## Telegraf with a user without permissions to create databases or when the ## database already exists. # skip_database_creation = false ## Name of existing retention policy to write to. Empty string writes to ## the default retention policy. Only takes effect when using HTTP. retention_policy = \"\" ## Write consistency (clusters only), can be: \"any\", \"one\", \"quorum\", \"all\". ## Only takes effect when using HTTP. # write_consistency = \"any\" ## Timeout for HTTP messages. # timeout = \"5s\" ## HTTP Basic Auth username = \"telegraf\" password = \"secretpassword\" docker 에 복사 docker cp ~/telegraf.conf telegraf:/etc/telegraf/telegraf.conf docker restart telegraf influxdb 에 접속 docker exec -it influxdb /bin/bash influx 데이터 확인 use alio show measurements; select * from cpu limit 100; grafana 접속 http://localhost:3000 id : admin / pw : root grafana.com 에서 가져오겠습니다. https://grafana.com/dashboards 감사합니다. // More info about config & dependencies: // - https://github.com/hakimel/reveal.js#configuration // - https://github.com/hakimel/reveal.js#dependencies Reveal.initialize({ dependencies: [ { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/marked.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/markdown.min.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/notes/notes.js', async: true }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/highlight/highlight.min.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } } ] });","link":"/presentation/influxdb.html"},{"title":"ppts","text":"reveal.js var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/pdf.css' : 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/paper.min.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); reveal.js 을 통한 손쉬운 프레젠테이션 발표을 할때 파워 포인트를 쓴다면 reveal.js 을 이용하여 손쉽게 ppt 을 만듭시다 github 에서 가져오기 $ git clone https://github.com/hakimel/reveal.js.git $ cd reveal.js $ npm start html 파일에 추가 &lt;section&gt;Slide 1&lt;/section&gt; Slide 1 순차적으로 출력 &lt;section id=&quot;fragments&quot;&gt; &lt;h2&gt;Fragments&lt;/h2&gt; &lt;p&gt;Hit the next arrow...&lt;/p&gt; &lt;p class=&quot;fragment&quot;&gt;... to step through ...&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;fragment&quot;&gt;... a&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;fragmented&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;slide.&lt;/span&gt;&lt;/p&gt; &lt;aside class=&quot;notes&quot;&gt; This slide has fragments which are also stepped through in the notes window. &lt;/aside&gt; &lt;/section&gt; Fragments Hit the next arrow... ... to step through ... ... a fragmented slide. This slide has fragments which are also stepped through in the notes window. 이미지 배경 삽입 &lt;section data-background=&quot;http://i.giphy.com/90F8aUepslB84.gif&quot;&gt; &lt;h2&gt;... and GIFs!&lt;/h2&gt; &lt;/section&gt; ... and GIFs! 감사합니다. // More info about config & dependencies: // - https://github.com/hakimel/reveal.js#configuration // - https://github.com/hakimel/reveal.js#dependencies Reveal.initialize({ dependencies: [ { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/marked.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/markdown.min.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/notes/notes.js', async: true }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/highlight/highlight.min.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } } ] });","link":"/presentation/new_web.html"},{"title":"Search","text":"","link":"/search/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"},{"title":"ppts","text":"reveal.js var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/pdf.css' : 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/css/print/paper.min.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); reveal.js 을 통한 손쉬운 프레젠테이션 발표을 할때 파워 포인트를 쓴다면 reveal.js 을 이용하여 손쉽게 ppt 을 만듭시다 github 에서 가져오기 $ git clone https://github.com/hakimel/reveal.js.git $ cd reveal.js $ npm start html 파일에 추가 &lt;section&gt;Slide 1&lt;/section&gt; Slide 1 순차적으로 출력 &lt;section id=&quot;fragments&quot;&gt; &lt;h2&gt;Fragments&lt;/h2&gt; &lt;p&gt;Hit the next arrow...&lt;/p&gt; &lt;p class=&quot;fragment&quot;&gt;... to step through ...&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;fragment&quot;&gt;... a&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;fragmented&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;slide.&lt;/span&gt;&lt;/p&gt; &lt;aside class=&quot;notes&quot;&gt; This slide has fragments which are also stepped through in the notes window. &lt;/aside&gt; &lt;/section&gt; Fragments Hit the next arrow... ... to step through ... ... a fragmented slide. This slide has fragments which are also stepped through in the notes window. 이미지 배경 삽입 &lt;section data-background=&quot;http://i.giphy.com/90F8aUepslB84.gif&quot;&gt; &lt;h2&gt;... and GIFs!&lt;/h2&gt; &lt;/section&gt; ... and GIFs! 감사합니다. // More info about config & dependencies: // - https://github.com/hakimel/reveal.js#configuration // - https://github.com/hakimel/reveal.js#dependencies Reveal.initialize({ dependencies: [ { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/marked.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/markdown/markdown.min.js' }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/notes/notes.js', async: true }, { src: 'https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/plugin/highlight/highlight.min.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } } ] });","link":"/presentation/reveal.js.html"}],"posts":[{"title":"AMBARI METRICS COLLECTOR 이동법","text":"1. 기존에 설치된 METRICS_COLLECTOR 제거1curl -u admin:admin -H \"X-Requested-By:ambari\" - i -X DELETE http://192.168.1.191:8080/api/v1/clusters/supercom_test/hosts/node04/host_components/METRICS_COLLECTOR 2. 새로운 호스트에 METRICS_COLLECTOR 설치1curl -u admin:admin -H \"X-Requested-By:ambari\" -i -X POST http://192.168.1.191:8080/api/v1/clusters/supercom_test/hosts/node02/host_components/METRICS_COLLECTOR","link":"/2019/02/24/AMBARI-METRICS-COLLECTOR-이동법/"},{"title":"AUR(yaourt) 설치 절차 및 debtap","text":"개요debian 패키지를 Arch Linux 에 설치 하기 위해서는 debtap 이 필요하며 이는 AUR 을 이용하여 설치하면 된다.arch linux 특징중에 하나는 유저가 패키지를 만들고 이를 공유할수 있다. 이를 이용하여 여러가지 패키지들을 설치할수 있다. 설치절차1. 관련 패키지 설치123456sudo pacman -S binutils gcc pkgfilesudo pkgfile --updatesudo pkgfile stripsudo pacman -S pkg-configsudo pacman -S makesudo pacman -S base-devel 2. yaourt 설치123git clone https://aur.archlinux.org/yaourt.gitcd yaourtmakepkg -si 3. debtap 설치1yaourt -S debtap 4. debtap 으로 패키지 변환하기12debtap hancomoffice-hwpviewer-Ubuntu-amd64.debsudo pacman -U ./hancomoffice-hwpviewer-9.20.0.1573-1-x86_64.pkg.tar.xz 후기데비안도 써보고 우분투도 써봤지만 아치리눅스 만큼 업데이트가 빠른 운영체제는 처음본거 같다.","link":"/2019/05/14/AUR-yaourt-설치-절차/"},{"title":"Ambari Agent가 실행되고도 Ambari 에서는 heartbeat lost가 발생할경우","text":"윈인 및 해결시간동기화 문제 해당 호스트들이 몇초 이상 시간차가 나서 인식을 안할수도 있다. 해결방안 : 각각의 Ambari Node 서버들에서 다음과 같은 명령어를 실행한다.1234systemctl stop ntpdntpdate 0.centos.pool.ntp.orgsystemctl start ntpdambari-agent restart open ssl 설정문제","link":"/2018/12/20/Ambari-Agent가-실행되고도-Ambari-에서는-heartbeat-lost가-발생할경우/"},{"title":"Ambari View 제작","text":"Ambari Apache Ambari 프로젝트는 Apache Hadoop 클러스터를 프로비저닝, 관리 및 모니터링하는 소프트웨어를 개발하여 Hadoop 관리를 단순화하는 것을 목표로 한다. Ambari는 REST REST API를 통해 직관적이고 사용하기 쉬운 Hadoop 관리 웹 UI를 제공한다.Apache Ambari project Ambari View Ambari Views는 Ambari Web에서 사용자 정의 시각화, 관리 및 모니터링 기능을 표면화하기 위해 UI 기능을 연결하는 체계적인 방법을 제공한다. “보기”는 제3자가 API, 공급자, UI와 함께 새로운 자원 유형을 지원하게 하는 Ambari를 확장하는 방법이다. 즉, 보기는 Ambari 컨테이너에 배치되는 애플리케이션이다. https://cwiki.apache.org/confluence/display/AMBARI/Views 즉 Ambari 에서 별도의 View 화면을 제공해주는 플러그인 이다 제작 절차 STS 우클릭후 New -&gt; Spring Legacy Project 에서 Spring MVC Project 생성 pom.xml 파일 설정 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182 &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-jsp&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.easymock&lt;/groupId&gt; &lt;artifactId&gt;easymock&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.ambari&lt;/groupId&gt; &lt;artifactId&gt;ambari-views&lt;/artifactId&gt; &lt;version&gt;2.0.0.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt; &lt;artifactId&gt;jersey-server&lt;/artifactId&gt; &lt;version&gt;1.8&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-server&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-servlets&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt;&lt;/dependency&gt;&lt;!-- Spring --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt; &lt;exclusions&gt; &lt;!-- Exclude Commons Logging in favor of SLF4j --&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-expression&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt;&lt;/dependency&gt; src/main/resources/view.xml 설정 1234567891011121314151617181920212223242526272829 &lt;view&gt; &lt;!-- ambari name --&gt; &lt;name&gt;AmbariViewTest&lt;/name&gt; &lt;label&gt;Ambari View Test&lt;/label&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;min-ambari-version&gt;2.0.*&lt;/min-ambari-version&gt; &lt;!-- ambari config data --&gt; &lt;parameter&gt; &lt;name&gt;ambari.server.url&lt;/name&gt; &lt;description&gt;Enter Ambari Server URL&lt;/description&gt; &lt;placeholder&gt;http://ambari.server:8080&lt;/placeholder&gt; &lt;default-value&gt;http://localhost:8080&lt;/default-value&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;ambari.server.containername&lt;/name&gt; &lt;description&gt;Enter Ambari Container Name&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;ambari.server.username&lt;/name&gt; &lt;description&gt;Enter Ambari Server username&lt;/description&gt; &lt;default-value&gt;admin&lt;/default-value&gt; &lt;/parameter&gt; &lt;!-- ambari view Properties --&gt; &lt;resource&gt; &lt;name&gt;configurations&lt;/name&gt; &lt;service-class&gt;com.test.lustre.dao&lt;/service-class&gt; &lt;/resource&gt;&lt;/view&gt; Spring Web 개발 maven 빌드 1mvn clean packge /var/lib/ambari-server/resources/viwes 에 빌드된 파일 이동 ambari 재시작 1ambari-server restart 확인","link":"/2018/12/19/Ambari-View-제작/"},{"title":"Ambari metric collector connection timeout","text":"Ambari metric collector connection timeout증상 Ambari 메인화면 에서 리소스 그래프가 로딩중으로 표시되고 출력이 안되었고 /var/log/ambari-server/ambari-server.log 파일을 보면 다음과 같은 에러메세지가 출력이 된다. 1218 Mar 2019 22:21:50,455 ERROR [ambari-client-thread-2396] MetricsRequestHelper:115 - Error getting timeline metrics : Read timed outMetricsRequestHelper:122 - Cannot connect to collector: SocketTimeoutException 해결방안 Ambari Metric Collector 서버를 재시작 1$ ambari-metrics-collector restart Ambari Server가 느려서 그럴수도 있다. Ambari &gt;&gt; Ambari Metrics &gt;&gt; Configs &gt;&gt; Metrics service checkpoint delay 항목을 60초에서 1800 초로 증가 시켰다. Ambari Metric Collector 서버의 메모리 용량을 증가 시켰다. 기존의 데이터를 지우고 다시 Ambari Metric Collector 서버를 재시작 한다. a. Ambari metcic server 을 maintenance 모드로 전환시킨다. b. Ambari metcic server 을 중지시킨다. c. Ambari metcic server 의 config 화면에서 다음을 참고한다.i. &apos;Metrics Service operation mode&apos; (embedded or distributed) ii. hbase.rootdir iii. hbase.zookeeper.property.dataDir d. AMS 서버내부에 hbase.rootdir 내부의 파일들을 백업 및 지운다.- 만약 Metrics Service operation mode 가 embedded 이면 로컬에서 지우고 - distributed 일경우에는 hdfs 을 이용하여 지운다 e. ‘hbase.tmp.dir’/zookeeper 폴더안의 내용도 백업 및 지운다. f. ‘hbase.tmp.dir’/phoenix-spool 폴더안의 내용도 백업 및 지운다. g. AMS 재 시작 및 maintenance 모드를 헤제 한다.","link":"/2019/03/21/Ambari-metric-collector-connection-timeout/"},{"title":"Arrow Function (ES6) 과 Normal Function 의 차이","text":"Arrow-Function-ES6-과-Function-의-차이기존의 javascript Function 의 this 객체는 java 와 달리 자기 자신이 아니라 호출 방식에 따라 this에 바인딩되는 객체가 달라집니다. this는 전역객체(Global object)에 포함되며 이는 내부함수와 메소드의 내부함수 , 그리고 콜백함수 에서도 this는 외부함수가 아닌 전역객체에 바인딩됩니다. 하지만 Arrow Function 안의 this는 해당 함수를 포함하는 겍체의 this가 됩니다. 또한 Arrow Function(() =&gt; {}) 은 기존 Function 과 달리 new로 호출할 수 없습니다. 따라서 handleClose() 을 넘길때 다음과 같이 bind 을 해서 처리해야 합니다. 12345678910111213141516171819202122232425class Testone extends Component { constructor(props){ super(props); this.state= { } this.handleClose = this.handleClose.bind(this); } handleClose(e){ console.log(e) } handleOpen = (e) =&gt; console.log(e); render() { return ( &lt;Testtow handleClose={this.handleClose} handleOpen={this.handleOpen} &gt; ) }}","link":"/2019/09/23/Arrow-Function-ES6-과-Function-의-차이/"},{"title":"Centos7 SELINUX disable 설정후 커널페닉 증상","text":"증상 Centos SELINUX 설정을 비활성화 후에 재부팅시 부팅화면에서 멈추는 현상 원인 /etc/selinux/config 파일에 SELINUXTYPE=disabled 설정되어 있음 해결방안 grub 화면에서 부팅 운영체제를 선택후 e 키를 눌러서 kernel 부팅 옵션으로 들어가서 linux16 / vmlinu 가 있는 부분에 selinux = 0 추가할것 linux16 / vmlinu - 생략 - selinux = 0 완료후에 Ctrl + x 키로 리부트","link":"/2018/12/20/Centos7-SELINUX-disable-설정후-커널페닉-증상/"},{"title":"Docker 이미지 저장 경로 변경하는 방법","text":"/etc/default/docker 파일내용을 다음과 같이 수정1DOCKER_OPTS=&quot;--dns 8.8.8.8 -g &lt;YOUR_DIR&gt;&quot; 예시) 1234567891011121314151617181920# Docker Upstart and SysVinit configuration file## THIS FILE DOES NOT APPLY TO SYSTEMD## Please see the documentation for \"systemd drop-ins\":# https://docs.docker.com/engine/admin/systemd/## Customize location of Docker binary (especially for development testing).#DOCKERD=\"/usr/local/bin/dockerd\"# Use DOCKER_OPTS to modify the daemon startup options.DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4 -g /mnt\"# If you need Docker to use an HTTP proxy, it can also be specified here.#export http_proxy=\"http://127.0.0.1:3128/\"# This is also a handy place to tweak where Docker's temporary files go.#export DOCKER_TMPDIR=\"/mnt/bigdrive/docker-tmp\" /lib/systemd/system/docker.service 파일내용을 다음과 같이 수정12EnvironmentFile=/etc/default/dockerExecStart=/usr/bin/dockerd -H unix:// $DOCKER_OPTS 예시)1234567891011[Service]Type=notify# the default is not to use systemd for cgroups because the delegate issues still# exists and systemd currently does not support the cgroup feature set required# for containers run by docker#ExecStart=/usr/bin/dockerd -H unix://EnvironmentFile=/etc/default/dockerExecStart=/usr/bin/dockerd -H unix:// $DOCKER_OPTSExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2 docker 서비스 리로딩 및 재시작123service docker stopsudo systemctl daemon-reloadservice docker start","link":"/2018/12/13/Docker-이미지-저장-경로-변경하는-방법/"},{"title":"How to Disable SELinux on CentOS 7","text":"SELinuxSELinux(Security Enhanced Linux)는 관리자와 사용자가 액세스 제어에 대한 제어력을 높일 수 있는 Linux 커널 보안 모듈이다. SELinux 정책 규칙에 따라 접속할 수 있다. SELinux 정책 규칙은 프로세스와 사용자가 파일과 상호 작용하는 방법뿐만 아니라 프로세스와 사용자가 서로 상호작용하는 방법을 지정한다. 파일을 여는 프로세스처럼 액세스를 특별히 허용하는 SELinux 정책 규칙이 없는 경우, 액세스가 거부된다. Disable SELinux SELinux mode 변경 1sudo setenforce 0 /etc/selinux/config 변경 SELINUX 항목을 disabled로 변경 12345678910# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:# enforcing - SELinux security policy is enforced.# permissive - SELinux prints warnings instead of enforcing.# disabled - No SELinux policy is loaded.SELINUX=disabled# SELINUXTYPE= can take one of these two values:# targeted - Targeted processes are protected,# mls - Multi Level Security protection.SELINUXTYPE=targeted Server reboot","link":"/2018/12/20/How-to-Disable-SELinux-on-CentOS-7/"},{"title":"PlayOnLinux is unable to find 32bits OpenGL libraries","text":"PlayOnLinux 실행시 ‘PlayOnLinux is unable to find 32bits OpenGL libraries’ 메세지 발생증상 PlayOnLinux 실행시 다음과 같은 메세지가 출력이 된다. 원인 sudo apt autoremove 을 실행하여 32bits OpenGL libraries 가 삭제 (의존성문제) 해결방안 저장소 추가 1dpkg --add-architecture i386 기존에 설치된 라이브러리 제거 1sudo apt-get purge fglrx* xorg.conf 제거 1sudo rm /etc/X11/xorg.conf 패키지 재설치 1sudo apt-get install --reinstall xserver-xorg-core libgl1-mesa-glx:i386 libgl1-mesa-dri:i386 libgl1-mesa-glx:amd64 libgl1-mesa-dri:amd64 xorg 재설정 1sudo dpkg-reconfigure xserver-xorg 재부팅","link":"/2019/03/06/PlayOnLinux-is-unable-to-find-32bits-OpenGL-libraries/"},{"title":"Hbase RegionServer 가 시간마다 셧다운될때","text":"참고 : https://superuser.blog/hbase-dead-regionserver/ 원인 : 시간 동기화 문제로그에 다음과같은 에러 메세지 출력 12018-02-06 22:17:06,598 INFO [regionserver/node04/192.168.1.194:16020] regionserver.HRegionServer: STOPPED: Unhandled: org.apache.hadoop.hbase.ClockOutOfSyncException: Server node04,16020,1517973362638 has been rejected; Reported time is too far out of sync with master. Time difference of 37329ms &gt; max allowed of 30000ms 각 노드마다 시간 동기화 필요","link":"/2019/02/24/Hbase-RegionServer-가-시간마다-셧다운될때/"},{"title":"Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json: dial unix /var/run/docker.sock: connect: permission denied","text":"docker가 root 계정으로 설치 되었을때 root 계정이 아닌 계정으로 docker를 실행하고자 하면 제목과 같은 에러가 발생할 때가 있다. 12$ sudo usermod -a -G docker $USER$ sudo service docker restart","link":"/2019/08/28/Got-permission-denied-while-trying-to-connect-to-the-Docker-daemon-socket-at-unix-var-run-docker-sock-Get-http-2Fvar-2Frun-2Fdocker-sock-v1-40-containers-json-dial-unix-var-run-docker-sock-connect-permission-denied/"},{"title":"Spring Boot - jar로 서비스 등록하기","text":"참고: Spring Boot - jar로 Deploy(배포)하기 [허원철의 개발 블로그] 서비스 등록 서비스 등록1sudo vi /etc/init.d/myApp 123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/shSERVICE_NAME=myAppPATH_TO_JAR=/usr/local/myApp.jarPID_PATH_NAME=/tmp/myApp-pidcase $1 in start) echo \"Starting $SERVICE_NAME ...\" if [ ! -f $PID_PATH_NAME ]; then nohup java -jar $PATH_TO_JAR /tmp 2&gt;&gt; /dev/null &gt;&gt; /dev/null &amp; echo $! &gt; $PID_PATH_NAME echo \"$SERVICE_NAME started ...\" else echo \"$SERVICE_NAME is already running ...\" fi ;; stop) if [ -f $PID_PATH_NAME ]; then PID=$(cat $PID_PATH_NAME); echo \"$SERVICE_NAME stoping ...\" kill $PID; echo \"$SERVICE_NAME stopped ...\" rm $PID_PATH_NAME else echo \"$SERVICE_NAME is not running ...\" fi ;; restart) if [ -f $PID_PATH_NAME ]; then PID=$(cat $PID_PATH_NAME); echo \"$SERVICE_NAME stopping ...\"; kill $PID; echo \"$SERVICE_NAME stopped ...\"; rm $PID_PATH_NAME echo \"$SERVICE_NAME starting ...\" nohup java $JAVA_OPTS -jar $PATH_TO_JAR /tmp 2&gt;&gt; /dev/null &gt;&gt; /dev/null &amp; echo $! &gt; $PID_PATH_NAME echo \"$SERVICE_NAME started ...\" else echo \"$SERVICE_NAME is not running ...\" fi ;;esac 서비스 실행 1service myapp start | stop | restart * spring boot 1.3부터는 별도의 스크립트 없이도 간단한 설정으로 자체적으로 실행이 가능함 Maven1234567 &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;executable&gt;true&lt;/executable&gt; &lt;/configuration&gt;&lt;/plugin&gt; Gradle 123bootJar {launchScript()} 서비스 등록 1sudo ln -s /var/myapp/myapp.jar /etc/init.d/myapp 서비스 실행 1service myapp start 참고 : Installing Spring Boot Applications","link":"/2018/12/27/Spring-Boot-jar로-서비스-등록하기/"},{"title":"Vagrant Disk Change","text":"설명 Vagrant 은 기본적으로 가상머신을 할당할때 디스크 사이즈가 10G 로 할당되어 있어서 추가로 용량을 잡을때 별도의 디스크를 잡아야 하는 문제가 생긴다. 이를 해결하기 위해서는 직접 virtualbox 을 통해서 디스크 사이즈를 조정해줘야 한다. 디스크 사이즈 변경법 Virtual box VMs 폴더로 이동 1cd ~/VirtualBox\\ VMs/&lt;virtualbox folder&gt; vmdk 파일 형식을 vdi 형식으로 변경 (디스크 수정이 가능한 포맷) 1VBoxManage clonehd &quot;ubuntu-xenial-16.04-cloudimg.vmdk&quot; &quot;ubuntu-xenial-16.04-cloudimg.vdi&quot; --format vdi 디스크 사이즈 변경 1VBoxManage modifyhd &quot;ubuntu-xenial-16.04-cloudimg.vdi&quot; --resize 40960 가상머신에서 수정한 디스크로 변경 결과","link":"/2018/12/15/Vagrant-Disk-Change/"},{"title":"Spring Security 에서 로그인 팝업창 안나오게 설정","text":"Spring Security 을 사용하면 가끔식 로그인 팝업창이 나오는데 출력을 헤제할수가 있다. 중요한건 NoPopupBasicAuthenticationEntryPoint.java 에서 제어하는 것이다. WebSecurityConfig.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.jeaeok.myproject.testApp.configs;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configuration/*** 스프링 시큐리티 설정* @author atcis**/public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private AuthProvider authProvider; @Bean public PasswordEncoder getEncoder() { return new BCryptPasswordEncoder(); } @Override /** * 스크링 시큐리트를 통하여 접근페이지 설정 */ protected void configure(HttpSecurity http) throws Exception{ http .logout() .logoutUrl(\"/api/logout\") .and() .csrf() .disable() .authorizeRequests() .antMatchers( \"/\", \"/api/v1/user/join\", \"/static/**\" ).permitAll() .anyRequest().authenticated() .and() .headers().frameOptions().sameOrigin() .and() .httpBasic() .authenticationEntryPoint(new NoPopupBasicAuthenticationEntryPoint()) ; http.authenticationProvider(authProvider); }} NoPopupBasicAuthenticationEntryPoint.java 1234567891011121314package com.jeaeok.myproject.testApp.configs;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.security.core.AuthenticationException;import org.springframework.security.web.AuthenticationEntryPoint;public class NoPopupBasicAuthenticationEntryPoint implements AuthenticationEntryPoint { @Override public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException { response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage()); }}","link":"/2019/07/18/Spring-Security-에서-로그인-팝업창-안나오게-설정/"},{"title":"Vagrant 사용법","text":"Vagrant 베이그런트(Vagrant)는 포터블 가상화 소프트웨어 개발 환경 (예: 개발 생산성 증가를 위해 가상화의 소프트웨어 구성 관리의 단순화를 시도하는 버추얼박스, 하이퍼-V, 도커 컨테이너, VM웨어, AWS)의 생성 및 유지보수를 위한 오픈 소스 소프트웨어 제품의 하나이다. 베이그런트는 루비 언어로 작성되어 있지만 생태계는 몇 가지 언어로 개발을 지원한다. - 위키백과) 설치설치환경 virtualbox 설치 추가 virtualbox 확장설치 Hyper-V 설정 설치절차 우분투 1sudo apt install virtualbox 윈도우즈 Download https://releases.hashicorp.com/vagrant/2.2.2/vagrant_2.2.2_x86_64.msi install package 맥 https://releases.hashicorp.com/vagrant/2.2.2/vagrant_2.2.2_x86_64.dmg install package Vagrantfile Vagrantfile 내용 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- mode: ruby -*-# vi: set ft=ruby :# vagrant 버쟌 설정Vagrant.configure(\"2\") do |config| # box 이름 지정 # https://app.vagrantup.com/boxes/search 에서 검색가능 config.vm.box = \"CentosBox/Centos7-v7.3-Minimal\" # vagrant 가상머신 이름지정 config.vm.define :node01 do |node01| # 호스트이름 지정 node01.vm.hostname = \"node01\" # 네트워크 설정 (브릿지 네트워크) node01.vm.network :\"public_network\", ip: \"192.168.1.195\", bridge: \"enp6s0\" # virtualbox 설정 node01.vm.provider \"virtualbox\" do |vb| # 메모리 설정 vb.customize [\"modifyvm\", :id, \"--memory\", 1024*2] vb.customize [\"modifyvm\", :id, \"--name\", \"node01\"] # 디스크 설정 # 만약에 파일이 존재하지 않을경우 디스크 파일 생성 if !File.exist?(\"mst01.vdi\") vb.customize [\"createhd\", \"--filename\", \"mst01.vdi\", \"--size\", 1024*10, \"--variant\", \"Fixed\"] vb.customize [\"modifyhd\", \"mst01.vdi\", \"--type\", \"shareable\"] end # 해당 파일 병으로 디스크 추가 vb.customize [\"storageattach\", :id, \"--storagectl\", \"SATA\", \"--port\", 1, \"--device\", 0, \"--type\", \"hdd\", \"--medium\", \"mst01.vdi\"] if !File.exist?(\"mst02.vdi\") vb.customize [\"createhd\", \"--filename\", \"mst02.vdi\", \"--size\", 1024*4, \"--variant\", \"Fixed\"] vb.customize [\"modifyhd\", \"mst02.vdi\", \"--type\", \"shareable\"] end vb.customize [\"storageattach\", :id, \"--storagectl\", \"SATA\", \"--port\", 2, \"--device\", 0, \"--type\", \"hdd\", \"--medium\", \"mst02.vdi\"] if !File.exist?(\"mst03.vdi\") vb.customize [\"createhd\", \"--filename\", \"mst03.vdi\", \"--size\", 1024*4, \"--variant\", \"Fixed\"] vb.customize [\"modifyhd\", \"mst03.vdi\", \"--type\", \"shareable\"] end vb.customize [\"storageattach\", :id, \"--storagectl\", \"SATA\", \"--port\", 3, \"--device\", 0, \"--type\", \"hdd\", \"--medium\", \"mst03.vdi\"] end end config.vm.define :node02 do |node02| node02.vm.hostname = \"node02\" node02.vm.network :\"public_network\", ip: \"192.168.1.196\", bridge: \"enp6s0\" node02.vm.provider \"virtualbox\" do |vb| vb.customize [\"modifyvm\", :id, \"--memory\", 1024*2] vb.customize [\"modifyvm\", :id, \"--name\", \"node02\"] if !File.exist?(\"ost1.vdi\") vb.customize [\"createhd\", \"--filename\", \"ost1.vdi\", \"--size\", 1024*10, \"--variant\", \"Fixed\"] vb.customize [\"modifyhd\", \"ost1.vdi\", \"--type\", \"shareable\"] end vb.customize [\"storageattach\", :id, \"--storagectl\", \"SATA\", \"--port\", 1, \"--device\", 0, \"--type\", \"hdd\", \"--medium\", \"ost1.vdi\"] if !File.exist?(\"ost2.vdi\") vb.customize [\"createhd\", \"--filename\", \"ost2.vdi\", \"--size\", 1024*4, \"--variant\", \"Fixed\"] vb.customize [\"modifyhd\", \"ost2.vdi\", \"--type\", \"shareable\"] end vb.customize [\"storageattach\", :id, \"--storagectl\", \"SATA\", \"--port\", 2, \"--device\", 0, \"--type\", \"hdd\", \"--medium\", \"ost2.vdi\"] if !File.exist?(\"ost3.vdi\") vb.customize [\"createhd\", \"--filename\", \"ost3.vdi\", \"--size\", 1024*4, \"--variant\", \"Fixed\"] vb.customize [\"modifyhd\", \"ost3.vdi\", \"--type\", \"shareable\"] end vb.customize [\"storageattach\", :id, \"--storagectl\", \"SATA\", \"--port\", 3, \"--device\", 0, \"--type\", \"hdd\", \"--medium\", \"ost3.vdi\"] end endend 기본명령어vagrant snapshot list 현재 스냅샷 목록을 불려온다 vagrant snapshot save [name] 해당 스냅샷 이름으로 저장한다 vagrant snapshot resotere [name] 해당 스냅샷 이름으로 복구한다 vagrant init [name [url]] 현재 디렉터리룰 Vagrant 환경으로 초기화한다. 12vagrant init ubuntu/trusty64vagrant up vagrant up [name|id] 이 명령은 Vagrant 파일에 따라 가상머신을 생성 및 구성한다 vagrant reload [name|id] 해당 가상머신을 종료하고 다시 실행한다 vagrant halt [name|id] 해당 가상머신을 종료한다 vagrant suspend [name|id] 해당 가상머신을 일시중지 한다 vagrant status [name|id] 현재 가상머신들의 상태를 표시한다 vagrant ssh [name|id] [– extra_ssh_args] 해당 가상머신으로 ssh 접속을 한다. vagrant destroy [name|id] 해당 가상머신을 삭제한다.","link":"/2018/12/15/Vagrant-사용법/"},{"title":"Vagrant 에서 메모리 CPU 코어수 조정","text":"메모리 할당을 설정시 Vagrantfile 에서 다음 항목을 추가한다.1config.vm.customize [\"modifyvm\", :id, \"--memory\", 2048] 아니면 CPU 설정시 다음 항목을 수정한다.1config.vm.customize [\"modifyvm\", :id, \"--cpus\", 2] Vagrantfile 예시12345678910111213141516171819202122232425262728293031# -*- mode: ruby -*-# vi: set ft=ruby :hosts = { \"n1\" =&gt; \"192.168.77.10\", \"n2\" =&gt; \"192.168.77.11\", \"n3\" =&gt; \"192.168.77.12\", \"n4\" =&gt; \"192.168.77.13\",}Vagrant.configure(\"2\") do |config| config.ssh.insert_key = false config.ssh.forward_agent = true check_guest_additions = false functional_vboxsf = false config.vm.box = \"bento/ubuntu-16.04\" hosts.each do |name, ip| config.vm.define name do |machine| machine.vm.network :private_network, ip: ip machine.vm.provider \"virtualbox\" do |v| v.customize [\"modifyvm\", :id, \"--cpus\", 2] v.name = name end end endend","link":"/2019/05/15/Vagrant-에서-메모리-CPU-코어수-조정/"},{"title":"WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 해결하기","text":"증상1234567891011121314[user@hostname ~]$ ssh root@pong@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the RSA key sent by the remote host is6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.Please contact your system administrator.Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.Offending RSA key in /var/lib/sss/pubconf/known_hosts:4RSA host key for pong has changed and you have requested strict checking.Host key verification failed. 원인known_hosts 파일에 저장되어 있는 정보하고 접속하려는 호스트와의 fingerprint 불일치 조치다음 명령어를 실행1ssh-keygen -R &lt;host&gt;","link":"/2018/12/27/WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED-해결하기/"},{"title":"manjaro linux(arch linux) 에서 한컴뷰어 설치","text":"개요참고: 아치리눅스 한국사용자 모임 - 한컴뷰어2014 부탁 좀 드려요..최근에 기존에 설치되었던 우분투를 지우고 만자로 리눅스를 설치했다. apt 패키지 매니저 대신 pacman 패키지를 사용하는거 제외하고는 우분투쓰는 느낌이고 업데이트 나오는 시기가 빠르다고 하는데 아직은 모르겠다.하지만 한컴뷰어를 설치하고자 했지만 유감스럽게도 Fedora 와 Ubuntu 만 제공하고 있어 아치리눅스 기반이 만자로에서는 설치가 제한이 된다.그러면 한컴뷰어 설치를 포기햐야 하는가? 정답은 그렇지 않다 이다. 다행히 deb 패키지를 arch linux 패키지로 변환이 가능하다. 설치 한컴 뷰어 다운로드 deb -&gt; pkg.tar.xz 파일로 변환 1debtap hancomoffice-hwpviewer-Ubuntu-amd64.deb 한컴뷰어 설치 1sudo pacman -U ./hancomoffice-hwpviewer-9.20.0.1573-1-x86_64.pkg.tar.xz 그런데 webkitgtk 의존성 문제가 발생했다. webkitgtk 을 설치하는데 확인해보니 AUR 로 설치해야 해서 yaourt 로 진행한다. webkitgtk 설치 1yaourt -S webkitgtk 설치는 되는거 같은데 .. 소스코드가 많아서 그런지 반나절이 지나도 빌드가 끝나지 않는다. 설치파일을 받아서 진행을 한다. 12wget https://cdn.repo.archlinuxcn.org/x86_64/webkitgtk-3%3A2.4.11-16-x86_64.pkg.tar.xzsudo pacman -U ./webkitgtk-3_2.4.11-16-x86_64.pkg.tar.xz 다시 3번을 진행하니 설치가 진행이 된다. 그런데 이제는 실행이 안되고 콘솔에서 hwpviewer 을 실행하니 다음에러가 발생했다.1hwpviewer: error while loading shared libraries: libicui18n.so.63: cannot open shared object file: No such file or directory 확인해보니 내컴퓨터에서 설치된 icu 패키지 버젼은 64 이고 한컴뷰어에서 요구하는 icu 패키지 버젼이 63인거 같다. 하지만 pacman 에서는 icu 64 로만 설치가된다. AUR 로 설치하자 icu63 설치 1yaourt -S icu63 다행히 빌드하는데 오래걸리지는 않았다. 한컴뷰어 실행 1hwpviewer 이제야 실행이 된다 후기 설치하면서 기존의 pacman 도 좋지만 대부분 AUR 을 이용해야만 설치가 진행이 되었다.","link":"/2019/05/13/arch-linux-에서-한컴뷰어-설치/"},{"title":"basic auth 구현 및 설명","text":"basic auth 이란api 서버에서 데이터을 요구할때 http Authorization 헤더에 user id 와 , password 을 base64 로 인코딩한 문자열을 추가하여 인증하는 형식 참고 : HTTP 기본인증 구현 config 설정 12345678910111213141516171819202122232425262728 @Autowired private AuthProvider authProvider; @Override/** * 스크링 시큐리트를 통하여 접근페이지 설정 */protected void configure(HttpSecurity http) throws Exception{ http .logout() .logoutUrl(\"/api/logout\") .and() .csrf() .disable() .authorizeRequests() .antMatchers( \"/\", \"/api/v1/user/join\", \"/static/**\" ).permitAll() .anyRequest().authenticated() .and() .headers().frameOptions().sameOrigin() .and() .httpBasic() .authenticationEntryPoint(new NoPopupBasicAuthenticationEntryPoint()) ; http.authenticationProvider(authProvider); } http.authenticationProvider 부분에 authProvider 추가 AuthProvider.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.jeaeok.myproject.testApp.configs;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Component;import com.jeaeok.myproject.testApp.domain.MyAuthenticaion;import com.jeaeok.myproject.testApp.domain.User;import com.jeaeok.myproject.testApp.services.UserService;@Component(\"authProvider\")/*** 로그인 확인 하는 클레스* @author atcis**/public class AuthProvider implements AuthenticationProvider { @Autowired private PasswordEncoder passwordEncoder; @Autowired private UserService userService; @Override public Authentication authenticate(Authentication authentication) throws AuthenticationException { String id = authentication.getName(); String password = authentication.getCredentials().toString(); User user_info = userService.getUser(id); if (null == user_info || !passwordEncoder.matches(password, user_info.getUserPassword())) { return null; } List&lt;GrantedAuthority&gt; grantedAuthorityList = new ArrayList&lt;&gt;(); if (user_info.isAdmin()) { grantedAuthorityList.add(new SimpleGrantedAuthority(\"ROLE_USER\")); } return new MyAuthenticaion(id, password, grantedAuthorityList, user_info); } @Override public boolean supports(Class&lt;?&gt; authentication) { return authentication.equals(UsernamePasswordAuthenticationToken.class); }} authentication.getName() : basic auth 부분에 id authentication.getCredentials().toString() : basic auth 부분에 password basic auth 은 base64 로 인코딩 되어 전송되기 때문에 중간자 공격에 취약할수도 있음","link":"/2019/07/18/basic-auth-구현-및-설명/"},{"title":"componentDidUpdate() 내부에 setstate() 사용여부","text":"react.js 을 사용하다 보면 부모 component 에서 prop 값이 변경될때 componentDidUpdate 을 사용하게된다.하지만 componentDidUpdate 내부에서 setstate() 을 사용할경우 무한 루프에 빠지게 되어다음과 같은 에러가 발생하게 된다.이를 해결하기 위해서는 componentDidUpdate 내부에서 setstate() 사용시 if 문을 이용하여 제어해야 한다. 예시12345componentDidUpdate(previousProps, previousState) { if (previousProps.data !== this.props.data) { this.setState({/*....*/}) }} 아니면 componentDidUpdate 대신 componentWillReceiveProps 을 사용하면 된다. componentWillReceiveProps() : 해당 component 에서 mount 하기전에 실행되어 props 을 받음","link":"/2019/07/18/componentDidUpdate-내부에-setstate-사용여부/"},{"title":"css margin, padding 한줄에 적을 때 순서","text":"계속 사용하지만 기억이 안나서 따로 적는다. padding 도 동일하다. 1234margin: [margin-top] [margin-right] [margin-bottom] [margin-left];margin: [margin-top] [margin-left = margin-right] [margin-bottom];margin: [margin-top=margin-bottom] [margin-left = margin-right];margin: [margin-top = margin-bottom = margin-left = margin-right]; 순서는 상 하 좌 우 이니 참고하자","link":"/2019/07/16/css-margin-padding-한줄에-적을-때-순서/"},{"title":"docker remote port open (docker 원격 API 활성화)","text":"경고 : Docker 에서 remote port open 할 경우 별도의 인증절차 없이 restful api 을 사용하므로보안에 취약합니다. 해당 작업으로 발생하는 사항은 권장하지 않으며 발생한 사항에 대하여 책임지지 않습니다. http://blog.brian.jp/docker,/docker/swarm,/netsec/2017/10/31/free-servers-with-docker-swarm.html docker remote port open (docker 원격 API 활성화)1. /lib/systemd/system/docker.service 내용 수정123[Service]EnvironmentFile=/etc/default/dockerExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS 2. /etc/default/docker 내용 수정1DOCKER_OPTS=&quot;--dns 8.8.8.8 --dns 8.8.4.4 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&quot; 3. docker 리로드 및 재시작12systemctl daemon-reloadservice docker restart 4. 테스트123curl http://localhost:2375/version{\"Platform\":{\"Name\":\"Docker Engine - Community\"},\"Components\":[{\"Name\":\"Engine\",\"Version\":\"18.09.2\",\"Details\":{\"ApiVersion\":\"1.39\",\"Arch\":\"amd64\",\"BuildTime\":\"2019-02-10T03:42:13.000000000+00:00\",\"Experimental\":\"false\",\"GitCommit\":\"6247962\",\"GoVersion\":\"go1.10.6\",\"KernelVersion\":\"4.15.0-45-generic\",\"MinAPIVersion\":\"1.12\",\"Os\":\"linux\"}}],\"Version\":\"18.09.2\",\"ApiVersion\":\"1.39\",\"MinAPIVersion\":\"1.12\",\"GitCommit\":\"6247962\",\"GoVersion\":\"go1.10.6\",\"Os\":\"linux\",\"Arch\":\"amd64\",\"KernelVersion\":\"4.15.0-45-generic\",\"BuildTime\":\"2019-02-10T03:42:13.000000000+00:00\"}","link":"/2019/02/24/docker-remote-port-open-docker-원격-API-활성화/"},{"title":"elementary OS 에서 이클립스 멈춤현상","text":"증상이클립스를 elementary OS 에서 실행하고자 하면 이클립스 실행중으로 나오고 작동이 안된다. 원인elementary OS 에서 쓰이는 GTK3 와 이클립스에 사용중인 GTK2이 충돌나서 그런것 같다 해결eclipse.ini 파일에 다음을 추가한다 1--launcher.GTK_version","link":"/2018/12/13/elementary-OS에서-이클립스-멈춤현상/"},{"title":"docker service log 보기","text":"1journalctl -u docker.service","link":"/2018/12/27/docker-service-log-보기/"},{"title":"freebsd 에서 gui 환경 셋팅하기","text":"freebsd 에서 gui 환경 셋팅하기 (그놈설치)1. install gnome31$ pkg install gnome3 2. fstab 파일 설정/etc/fstab 파일에 내용추가1proc /proc procfs rw 0 0 3. rc.conf 파일설정1234dbus_enable=&quot;YES&quot;hald_enable=&quot;YES&quot;gdm_enable=&quot;YES&quot;gnome_enable=&quot;YES&quot; 4. 재부팅후 확인1$ reboot 참고 : freebsd handbook - 5.7. Desktop Environments","link":"/2019/03/10/freebsd-에서-gui-환경-셋팅하기/"},{"title":"freebsd 에서 게스트확장 설치하기","text":"1. vbox guest additions 설치하기1$ pkg install virtualbox-ose-additions 2. /etc/X11/xorg.conf 파일 설정1$ vim /etc/X11/xorg.conf 1234567891011Section &quot;Device&quot; Identifier &quot;Card0&quot; Driver &quot;vboxvideo&quot; VendorName &quot;InnoTek Systemberatung GmbH&quot; BoardName &quot;VirtualBox Graphics Adapter&quot;EndSectionSection &quot;InputDevice&quot; Identifier &quot;Mouse0&quot; Driver &quot;vboxmouse&quot;EndSection 3. /etc/rc.conf 파일 설정1$ vim /etc/rc.conf /etc/rc.conf 파일에 다음과 내용 추가12vboxguest_enable=&quot;YES&quot;vboxservice_enable=&quot;YES&quot; 4. reboot 후 확인1$ reboot 참고 : freebsd handbook - 21.5. FreeBSD as a Guest on VirtualBox","link":"/2019/03/10/freebsd-에서-게스트확장-설치하기/"},{"title":"git pull시 'fatal: 관계 없는 커밋 내역의 병합을 거부합니다' 발생시","text":"git 에서 오래동안 pull 을 안했더니 fatal: 관계 없는 커밋 내역의 병합을 거부합니다 에러 메세지가 발생하였다. 해결방안123$ git fetch --all$ git reset --hard origin/master$ git pull origin master git fetch --all : git remote 에서 전체 내용을 받아온다. git reset --hard origin/master : 수정된 내역을 지우고 이전내용으로 복구한다. git pull origin master : 현재 작업하고있는 로컬에 커밋을 병합한다.","link":"/2019/07/31/git-pull시-fatal-관계-없는-커밋-내역의-병합을-거부합니다-발생시/"},{"title":"hexo -> notion 으로 데이터 이전중 입니다.","text":"ㅈㄱㄴ","link":"/2019/10/02/hexo-notion-으로-데이터-이전중-입니다/"},{"title":"gitlab docker root password reset","text":"gitlab 이용간 관리자 비번을 까벅었다! 초기화 하자 초기화 docker console 접속 1$ docker exec -it gitlab /bin/bash Ruby on Rails console 접속 1$ gitlab-rails console production root 유저 설정으로 접속 1irb(main):006:0&gt; user = User.where(id: 1).first or1irb(main):006:0&gt; user = User.find_by(email: 'admin@example.com') 패스워드 초기화 12irb(main):006:0&gt; user.password = 'secret_pass'irb(main):006:0&gt; user.password_confirmation = 'secret_pass' 저장 1irb(main):006:0&gt; user.save!","link":"/2019/07/25/gitlab-docker-root-password-reset/"},{"title":"hexo password 설정","text":"hexo-blog-encrypt 모듈 설치 1$ npm install --save hexo-blog-encrypt _config.yml 에 다음항목 추가 12encrypt: enable: true post 상단에 다음 항목추가 12345---password: mikemessiabstract: Welcome to my blog, enter password to read.message: Welcome to my blog, enter password to read.---","link":"/2019/07/31/hexo-password-설정/"},{"title":"hexo tags 페이지 생성","text":"새로운 페이지 생성1hexo new page \"tags\" source/tags/index.md header 수정12345---title: Tagsdate: 2018-12-27 00:55:17type: tags---","link":"/2018/12/27/hexo-tags-페이지-생성/"},{"title":"hexo 에서 html 문서 계시하기","text":"hexo 에서 html 문서 계시하기hexo 에서 마크다운형식으로 페이지를 만들지만 가끔씩 마크다운 문서가 아닌 html 문서로 계시해야 할 경우가 발생한다. 그럴경우 html 문서 상단에 다음과 같은 태그를 추가한다. 12345---title: pptsdate: 2019-02-17 20:08:57layout: false--- 하지만 css, js 파일은 인식이 안되어서 cdn 을 통하여 직접 임포트를 해야하는것 같다.","link":"/2019/03/10/hexo-에서-html-문서-계시하기/"},{"title":"hexo 에서 페이지가 깨질때","text":"증상hexo 에서 hexo deploy 을 실행후 다음과 같은 에러 발생 원인이전의 deploy 할때의 css 파일이 남아서 생긴문제 해결다음 명령어 입력12$ hexo clean$ hexo deploy 입력후 정상적으로 동작확인","link":"/2019/07/15/hexo-에서-페이지가-깨질때/"},{"title":"java.io.IOException: com.jcraft.jsch.JSchException: invalid privatekey: [B@24a1c17f jsch 오류발생","text":"증상 jsch 운영간에 다음과 같은 에러발생1234567Caused by: com.jcraft.jsch.JSchException: invalid privatekey: [B@24a1c17f at com.jcraft.jsch.KeyPair.load(KeyPair.java:902) at com.jcraft.jsch.KeyPair.load(KeyPair.java:543) at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:40) at com.jcraft.jsch.JSch.addIdentity(JSch.java:393) at com.jcraft.jsch.JSch.addIdentity(JSch.java:353) at com.jcabi.ssh.SSH.session(SSH.java:261) 원인 jsch 에서 연동되는 .ssh/id_rsa 파일형식이 잘못되었다. cat ~/.ssh/id_rsa 파일을 확인하면 다음과 같이 출력12345-----BEGIN OPENSSH PRIVATE KEY-----........................-----END OPENSSH PRIVATE KEY----- 조치사항 ssh-keygen 으로 키을 생성할때 다음과 같은 옵셥추가1$ ssh-keygen -m PEM","link":"/2019/03/23/java-io-IOException-com-jcraft-jsch-JSchException-invalid-privatekey-B-24a1c17f-jsch-오류발생/"},{"title":"java spark wordcount examples","text":"pom.xml 설정 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt; &lt;version&gt;2.4.3&lt;/version&gt; &lt;/dependency&gt; . . . &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;2.0.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;addClasspath&gt;true&lt;/addClasspath&gt; &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt; &lt;mainClass&gt;com.geekcap.javaworld.sparkexample.WordCount&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy&lt;/id&gt; &lt;phase&gt;install&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-dependencies&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; java example 12345678SparkConf sparkConf = new SparkConf().setMaster(\"local\").setAppName(\"JD Word Counter\");JavaSparkContext sc = new JavaSparkContext(sparkConf);JavaRDD&lt;String&gt; textFile = sc.textFile(\"text.txt\");JavaPairRDD&lt;String, Integer&gt; counts = textFile .flatMap(s -&gt; Arrays.asList(s.split(\" \")).iterator()) .mapToPair(word -&gt; new Tuple2&lt;&gt;(word, 1)) .reduceByKey((a, b) -&gt; a + b);counts.saveAsTextFile(\"wordcouter\");","link":"/2019/07/22/java-spark-wordcount-examples/"},{"title":"java 랜덤 문자열 생성","text":"pom.xml 추가 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt;&lt;/dependency&gt; 랜덤 문자열 생성 : 알파벳 랜덤 5개 생성 1RandomStringUtils.randomAlphabetic(5) 랜덤 문자열 생성 : 숫자포함 알파벳 랜덤 5개 생성 1RandomStringUtils.randomAlphanumeric(5) 랜덤 문자열 생성 : 아스키 코드 랜덤 5개 생성 1RandomStringUtils.randomAscii(5)","link":"/2019/07/18/java-랜덤-문자열-생성/"},{"title":"linux 에서 vscode-chrome-debug 설정하기","text":"launch.json 에서 다음과 같이 수정 12345678910111213141516171819202122{ // IntelliSense를 사용하여 가능한 특성에 대해 알아보세요. // 기존 특성에 대한 설명을 보려면 가리킵니다. // 자세한 내용을 보려면 https://go.microsoft.com/fwlink/?linkid=830387을(를) 방문하세요. \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"chrome\", \"request\": \"launch\", \"name\": \"Launch Chrome against localhost\", \"url\": \"http://localhost:3000\", \"webRoot\": \"${workspaceFolder}/src\", \"runtimeExecutable\": \"/usr/bin/google-chrome-stable\", \"runtimeArgs\": [ \"--new-window\", \"-user-data-dir=\\\"/${workspaceFolder}/DevProfile\\\"\", \"--remote-debugging-port=9222\", \"--disable-background-networking\" ] } ]} runtimeExecutable 에 들어갈 chrome 위치 확인하기 1whereis google-chrome-stable","link":"/2019/09/08/linux-에서-vscode-chrome-debug-설정하기/"},{"title":"locale.Error: unsupported locale setting","text":"에러내용12345678Traceback (most recent call last): File \"/bin/pip\", line 9, in &lt;module&gt; load_entry_point('pip==8.1.1', 'console_scripts', 'pip')() File \"/usr/lib/python2.7/site-packages/pip-8.1.1-py2.7.egg/pip/__init__.py\", line 215, in main locale.setlocale(locale.LC_ALL, '') File \"/usr/lib64/python2.7/locale.py\", line 547, in setlocale return _setlocale(category, locale)locale.Error: unsupported locale setting 해결책12export LC_ALL=\"en_US.UTF-8\"export LC_CTYPE=\"en_US.UTF-8\"","link":"/2018/12/13/locale-Error-unsupported-locale-setting/"},{"title":"manjaro 에서 pacman 이용시 pgp 에러 발생시","text":"pacman -Syyu 입력시 다음 에러가 발생할경우 12$ pacman -Syyuerror: fzf: signature from &quot;Ambrevar &lt;ambrevar@gmail.com&gt;&quot; is unknown trust :: File /var/cache/pacman/pkg/fzf-0.17.0.2-1-x86_64.pkg.tar.xz is corrupted (invalid or corrupted package (PGP signature)). 다음 명령어로 해결한다. 1sudo pacman-key --refresh-keys 다음 에러가 추가 발생시 12345$ sudo pacman -Syuerror: GPGME error: No dataerror: GPGME error: No dataerror: GPGME error: No dataerror: GPGME error: No data 다음 명령어를 입력한다. 12sudo pacman -Sy archlinux-keyring manjaro-keyringsudo pacman-key --populate archlinux manjaro 다음에 다시한번 확인한다. 1sudo pacman -Syyu 원인은 자세하게 확인해봐야 하겠지만 업데이트 서버에 있는 서명과 내노트북에 있는 서명값이 달라서 생긴것 같다.","link":"/2019/06/08/manjaro-에서-pacman-이용시-pgp-에러-발생시/"},{"title":"manjaro 에서 update 할때 npm : /usr/lib/node_modules/npm/node_modules/query-string/index.d.ts 증복오류 발생","text":"원인과게에 npm 을 pacman 으로 설치하고 최근에 npm install -g npm 을 해서 중복된 파일이 발생하여 무결성 검사에 실패함 조치1$ sudo pacman -S npm --overwrite /usr/lib/node_modules/npm/node_modules/query-string/index.d.ts 명령어로 해결 pacman 설치시 중복된 파일이 있을경우 –overwrite /filepath 을 사용하자","link":"/2019/07/05/manjaro-에서-update-할때-npm-usr-lib-node-modules-npm-node-modules-query-string-index-d-ts-증복오류-발생/"},{"title":"markdown 문서에서 word 문서로 변환","text":"markdown 문서 -&gt; 워드형식으로 변환markdown 문서를 작성하다가 워드형식으로 문서가 필요했고 마크다운에서 복붙하기에는 양식이 깨져서 문제가 있었다. 해결방안을 찾다가 pandoc 이라는 것을 찾아서 적용하기로 했다. 설치1$ sudo pacman -S pandoc 지금 사용하는 리눅스는 manjaro 이니 설치한 리늑스에 맞추어서 사용하면 된다. 변환1$ pandoc README.md -f markdown -t docx -s -o README.docx 참고https://hue9010.github.io/etc/pandoc/","link":"/2019/07/08/markdown-문서에서-word-문서로-변환/"},{"title":"minishift install 하기","text":"1. 개요2. 설치https://docs.okd.io/latest/minishift/getting-started/setting-up-virtualization-environment.html 참고 2.1. libvirt qemu dnsmasq ebtables 설치1$ sudo pacman -S libvirt qemu dnsmasq ebtables 2.2. 로그인된 계정을 kvm,libvir 그룹에 추가1$ sudo usermod -a -G kvm,libvirt $(whoami) 2.3. /etc/libvirt/qemu.conf 내용 추가1$ sudo sed -ri &apos;s/.?group\\s?=\\s?&quot;.+&quot;/group = &quot;kvm&quot;/1&apos; /etc/libvirt/qemu.conf 2.4. libvirt 그룸생성1$ newgrp libvirt 2.5. root 계정에서 KVM driver binary 설치12# curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.10.0/docker-machine-driver-kvm-centos7 -o /usr/local/bin/docker-machine-driver-kvm# chmod +x /usr/local/bin/docker-machine-driver-kvm 2.6. libvirt networking 설정2.6.1 네트워크 확인123456 sudo virsh net-list --all 이름 상태 자동 시작 Persistent---------------------------------------------------- default 활성화 예 예 docker-machines 활성화 예 예 minikube-net 활성화 예 예 2.6.2 default libvirt network 시작1$ sudo virsh net-start default 2.6.3 libvirt network 자동시작 설정1$ sudo virsh net-autostart default 2.3. minishift 설치 3. minishift 시작1$ minishift start","link":"/2019/05/21/minishift-install-하기/"},{"title":"mecab-ko-dic 품사 태그 설명","text":"세종 품사 태그 태그 설명 NNG 일반 명사 NNP 고유 명사 NNB 의존 명사 NR 수사 NP 대명사 VV 동사 VA 형용사 VX 보조 용언 VCP 긍정 지정사 VCN 부정 지정사 MM 관형사 MAG 일반 부사 MAJ 접속 부사 IC 감탄사 JKS 주격 조사 JKC 보격 조사 JKG 관형격 조사 JKO 목적격 조사 JKB 부사격 조사 JKV 호격 조사 JKQ 인용격 조사 JX 보조사 JC 접속 조사 EP 선어말 어미 EF 종결 어미 EC 연결 어미 ETN 명사형 전성 어미 ETM 관형형 전성 어미 XPN 체언 접두사 XSN 명사 파생 접미사 XSV 동사 파생 접미사 XSA 형용사 파생 접미사 XR 어근 SF 마침표, 물음표, 느낌표 SE 줄임표 SS 따옴표,괄호표,줄표 SP 쉼표,가운뎃점,콜론,빗금 SO 붙임표(물결,숨김,빠짐) SW 기타기호 (논리수학기호,화폐기호) SL 외국어 SH 한자 SN 숫자 mecab-ko-dic 품사 태그 태그 설명 NNG 일반 명사 NNP 고유 명사 NNB 의존 명사 NNBC 단위를 나타내는 명사 NR 수사 NP 대명사 VV 동사 VA 형용사 VX 보조 용언 VCP 긍정 지정사 VCN 부정 지정사 MM 관형사 MAG 일반 부사 MAJ 접속 부사 IC 감탄사 JKS 주격 조사 JKC 보격 조사 JKG 관형격 조사 JKO 목적격 조사 JKB 부사격 조사 JKV 호격 조사 JKQ 인용격 조사 JX 보조사 JC 접속 조사 EP 선어말 어미 EF 종결 어미 EC 연결 어미 ETN 명사형 전성 어미 ETM 관형형 전성 어미 XPN 체언 접두사 XSN 명사 파생 접미사 XSV 동사 파생 접미사 XSA 형용사 파생 접미사 XR 어근 SF 마침표, 물음표, 느낌표 SE 줄임표 … SSO 여는 괄호 (, [ SSC 닫는 괄호 ), ] SC 구분자 , · / : SY SL 외국어 SH 한자 SN 숫자","link":"/2019/07/25/mecab-ko-dic-품사-태그-설명/"},{"title":"mp4 -> gif 로 파일변환","text":"개요markdown 으로 문서작성간에 실제 사용하는 장면을 추가하고 싶지만 동영상 파일자체의 용량도 크고 마크다운에서는 이미지만 첨부가능 하여 방법을 찾다가. gif 로 변환하여 첨부하기로 했다. 설치1$ sudo pacman -S ffmpeg mp4 -&gt; gif1$ ffmpeg -i Screencast\\ 2019-07-07\\ 16:27:53.mp4 Screencast\\ 2019-07-07\\ 16:27:53.gif 이렇게 변환을 했더니 용량이 50메가 넘게 나와서 업로드가 안되었다. 프레임을 낮추어서 변환을 진행했다. 1$ ffmpeg -i Screencast\\ 2019-07-07\\ 16:27:53.mp4 -r 5 Screencast\\ 2019-07-07\\ 16:27:53.gif -r 5 옵션은 5프레임으로 설정한다는 뜻이다. 변환후에 용량을 확인해보니 20메가 이하로 줄었다. 확인해보니 샤나인코더도 ffmpeg 기반이라고 한다. https://namu.wiki/w/FFmpeg","link":"/2019/07/08/mp4-gif-로-파일변환/"},{"title":"npm build 간 javascript heap out of memory npm build 발생시","text":"증상npm run build 후 다음과 같은 에러 메세지 발생1FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 원인이는 기본 Node.js 가용 메모리가 빌드하기에 충분하지 않아 발생하는 오류 조치package.json 내부의 build 항목을 다음과 같이 수정 1234\"scripts\": { ... \"build\": \"node --max_old_space_size=8096 scripts/build.js\", },","link":"/2018/12/27/npm-build-간-javascript-heap-out-of-memory-npm-build-발생시/"},{"title":"npm WARN @typescript-eslint/eslint-plugin@1.6.0 requires .... 경고발생","text":"증상npm install 간 경고창 생성 해결방안123$ rm -rf package-lock.json$ npm install --save typescript $ npm install 참고 : https://stackoverflow.com/questions/56907286/npm-warn-typescript-eslint-eslint-plugin1-6-0-requires-a-peer-of-typescript","link":"/2019/08/02/npm-WARN-typescript-eslint-eslint-plugin-1-6-0-requires-경고발생/"},{"title":"nvm 설치 (node version manager)","text":"개요node.js 을 사용하다 보면 빠르게 버젼업이 되고 있으며 그로 인하여 패키지는 node 버젼이 안맞아서 충돌이 발생하기도 한다.nvm 을 이용하면 손쉽게 node.js 버젼관리가 되며 npm global 설치시 별도의 관리자 권한을 안줘도 된다. 설치설치는 단순하다. install script 다운 및 설치 1$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash 자동으로 ~/.bash_profile, ~/.zshrc, ~/.profile, ~/.bashrc 에 nvm 명령어가 추가 되겠지만 만약 안될수도 있다. 그럴경우에는 직접 스크립트를 수정한다. ~/.zshrc 수정12export NVM_DIR=~/.nvm[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; 실행node.js 을 설치 하고자 할때1$ nvm install node 혹은1$ nvm install 6.14.4 제거1npm uninstall node","link":"/2019/07/18/nvm-설치-node-version-manager/"},{"title":"org.apache.ibatis.reflection.ReflectionException:  오류","text":"원인mybatis를 사용해서 쿼리를 실행할 때 주의할 점이 있다.parameterType=”string” 이면서 1개 입력값만 받을 때 if test 문법으로 null 처리를 할 때 오류가 날 수 있다.오류는 아래와 같다. 12org.apache.ibatis.reflection.ReflectionException:There is no getter for property named 'name' in 'class java.lang.String' 해결방안if test 부분에 parameter 이름을 value로 하면 된다. 123&lt;if test=\"value != null and value !=''\"&gt; AND a.name = #{value}&lt;/if&gt; parameterType=”hashmap” 을 사용하면 컬럼명 그대로 사용 가능하다. 123&lt;if test=\"name != null and name !=''\"&gt; AND a.name = #{name }&lt;/if&gt;","link":"/2018/12/13/org-apache-ibatis-reflection-ReflectionException-오류/"},{"title":"pip - locale.Error: unsupported locale setting","text":"상황 sudo pip install ansible 입력시 다음과 같은 에러발생123456789vagrant@vagrant:~$ sudo pip install ansibleTraceback (most recent call last): File &quot;/usr/bin/pip&quot;, line 11, in &lt;module&gt; sys.exit(main()) File &quot;/usr/lib/python2.7/dist-packages/pip/__init__.py&quot;, line 215, in main locale.setlocale(locale.LC_ALL, &apos;&apos;) File &quot;/usr/lib/python2.7/locale.py&quot;, line 581, in setlocale return _setlocale(category, locale)locale.Error: unsupported locale setting 해결 다음 명령어를 입력하여 해결 123vagrant@vagrant:~$ export LC_ALL=&quot;en_US.UTF-8&quot;vagrant@vagrant:~$ export LC_CTYPE=&quot;en_US.UTF-8&quot;vagrant@vagrant:~$ sudo dpkg-reconfigure locales 다음 창이 나오면 “en_US.UTF-8 UTF-8” 이 체크되어 있는지 확인후에 탭키로 OK 항목으로 이동후 엔터","link":"/2019/05/15/pip-locale-Error-unsupported-locale-setting/"},{"title":"react.js + spring boot","text":"Spring 프로젝트 생성 프로젝트 내부에 별도의 폴더생성 npm install -g create-react-app create-react-app –use-npm npm run eject (webpack 설정 필요시) package.json 내부에 다음항목추가 1\"proxy\": \"http://localhost:8080\", config / paths.js 내부에 추가 12templatesPath: resolveApp('../src/main/resources/templates'),appBuild: resolveApp('../src/main/resources/static'), script / build.js 내부에 “measureFileSizesBeforeBuild” 함수 then 구문안 마직막 부분에 추가 123fs.rename(paths.appBuild + '/index.html', paths.templatesPath + '/index.html', function (err) { console.log('index.html move')}) 평소에는 webpack dev server 이용하다가 배포시 npm build 후에 배포","link":"/2018/12/13/react-js-spring-boot/"},{"title":"react-apollo 을 통한 graphql 연동 (1일차)","text":"react-apolloreact-apollo 을 통하여 graphql 을 손쉽게 제어가능 axios - graphql 연동 예시 123456789101112131415161718const data = await axios.post(API_URL, { query: ` updateUserCity(userID: ${id}, city:${city}){ id name age city knowledge{ language frameworks } } `}, { headers: { 'Content-Type': 'application/json' }}); 설치 create-react-app 으로 프로젝트 생성 123npx create-react-app my-appcd my-appnpm start react-apollo 설치 12# installing the preset package (apollo-boost) and react integrationnpm install apollo-boost react-apollo graphql-tag graphql --save","link":"/2019/08/01/react-apollo-을-통한-graphql-연동-1일차/"},{"title":"react 외부 javascript 라이브러리 불려오기 (kakao map javascript)","text":"개요react 을 이용하다 보면 대부분의 라이브러리들은 npm 을 이용하여 손쉽게 이용이 가능하다.하지만 cdn 혹은 kakao map 과 같은 api 을 통한 javascript 라이브러리 은 인증문제도 있어서 가져오기 애매할수도 있다. 그렇다고 해서 방법이 없는것은 아니다. scriptjs 을 통하여 외부 라이브러리를 통하여 가져올수는 있다. 설치1$ npm i scriptjs 예시1234567891011121314import $script from 'scriptjs';...const kakao_url = `http://dapi.kakao.com/v2/maps/sdk.js?autoload=false&amp;appkey=${API_KEY}`;$script(kakao_url, () =&gt; { /*global kakao*/ this.kakao = kakao; kakao.maps.load(function () { // v3가 모두 로드된 후, 이 콜백 함수가 실행됩니다. ... });}); scriptjs 사용시 / global {변수명} / 을 추가하여 컴파일시 에러가 나지 않도록 조치 한다. react.js 와 연동 (전체 스크립트)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128import React, { Component , createRef} from 'react'import $script from 'scriptjs';import * as mapApi from '../../services/maps'export default class KakaoMap extends Component { constructor(props){ super(props); this.appRef = createRef(); } state = { API_KEY: null, setLoading: true, } componentDidMount() { this.getApiKey().then(API_KEY =&gt; { this.setState({ API_KEY, setLoading: false, }); this.setKakaoMap(); }); } componentDidUpdate(){ if (this.customOverlay){ this.customOverlay.setMap(null); this.customOverlay = null; } this.setCenter(); this.setOverLay(); } /** * 서버에 api 키 가져오기 */ getApiKey = async () =&gt; { const res = await mapApi.getApiKey(); return res.data; } /** * 지도 가운데 */ setCenter = ()=&gt;{ var LatLng = this.props.LatLng; let { x, y } = LatLng; if(typeof this.kakao === 'undefined' || this.kakao == null) return false; // 이동할 위도 경도 위치를 생성합니다 var moveLatLon = new this.kakao.maps.LatLng(y, x); // 지도 중심을 이동 시킵니다 this.map.setCenter(moveLatLon); } /** * 오버레이 생성 */ setOverLay = () =&gt; { var LatLng = this.props.LatLng; let { x, y , data} = LatLng; // console.log(data); if (typeof this.kakao === 'undefined' || this.kakao == null || !data) return false; // 커스텀 오버레이에 표시할 내용입니다 // HTML 문자열 또는 Dom Element 입니다 var content = ` &lt;div id=\"overlay-area\" class=\"arrow_box\"&gt; &lt;ul&gt; &lt;li&gt;${data.address_name}&lt;/li&gt; &lt;li&gt;${data.category_name}&lt;/li&gt; &lt;li&gt;${data.phone}&lt;/li&gt; &lt;li&gt;${data.place_name}&lt;/li&gt; &lt;li&gt;${data.place_url}&lt;/li&gt; &lt;ul&gt; &lt;/div&gt; `; // 커스텀 오버레이가 표시될 위치입니다 var position = new kakao.maps.LatLng(y, x); // 커스텀 오버레이를 생성합니다 this.customOverlay = new kakao.maps.CustomOverlay({ position: position, content: content }); // 커스텀 오버레이를 지도에 표시합니다 this.customOverlay.setMap(this.map); } /** * 카카오 맵 생성 */ setKakaoMap = ()=&gt;{ var {x , y} = this.props.LatLng; const {API_KEY} = this.state; const kakao_url = `http://dapi.kakao.com/v2/maps/sdk.js?autoload=false&amp;appkey=${API_KEY}`; var that = this; $script(kakao_url, () =&gt; { //console.log(); // golobal setting /*global kakao*/ this.kakao = kakao; kakao.maps.load(function () { // v3가 모두 로드된 후, 이 콜백 함수가 실행됩니다. that.kakao = kakao; that.map = new that.kakao.maps.Map(that.appRef.current, { center: new that.kakao.maps.LatLng(y, x), // 지도의 중심좌표 level: 3 // 지도의 확대 레벨 }); }); }); } render() { const { setLoading } = this.state return ( (setLoading)? &lt;div&gt;Looooooooooooading....&lt;/div&gt; : &lt;div style={{ 'height': '850px' }} ref={this.appRef} /&gt; ) }}","link":"/2019/07/18/react-외부-javascript-라이브러리-불려오기-kakao-map-javascript/"},{"title":"react proxy server 설정","text":"개요npm devserver 에서 proxy 설정을 할경우 package.json 파일에 &quot;proxy&quot;: &quot;http://localhost:&lt;PORT-GOES-HERE&gt;” 항목을 추가해서 설정을 했었다. 문제는 기본적인 주소만 설정이 되어 있어서 웹소켓 같은 세부설정이 안되는 문제가 있었다. CRA (Create-react-app) v2 부터는 src/setupProxy.js 파일을 통하여 proxy server 을 커스터마이징 을 할수있게 되었다. 참고 @velopert Create-react-app V2 릴리즈! 무슨 변경 사항이 있을까? 설치 기존 프로젝트에 http-proxy-middleware 추가하기 1$ npm install --save-dev http-proxy-middleware package.json 에 &quot;proxy&quot;: &quot;http://localhost:&lt;PORT-GOES-HERE&gt;” 항목 제거 src/setupProxy.js 파일 생성 및 수정123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 const proxy = require('http-proxy-middleware');// create-react-app proxy 설정// 190524 je.kim dev server 에서 proxy 사용시 세션 유지 불가 -&gt; 강제로 세션키를 맞춤var cookie;// proxy 로 request 시 이벤트function relayRequestHeaders(proxyReq, req) { console.debug('💥💥💥 request 💥💥💥'); Object.keys(req.headers).forEach(function (key) { console.debug(`${key} : ${req.headers[key]}`); }); if (cookie) { proxyReq.setHeader('cookie', cookie); }};// proxy 로 Response 시 이벤트function relayResponseHeaders(proxyRes, req, res) { console.debug('💥💥💥 response 💥💥💥'); Object.keys(proxyRes.headers).forEach(function (key) { console.debug(`${key} : ${proxyRes.headers[key]}`); }); var proxyCookie = proxyRes.headers[\"set-cookie\"]; if (proxyCookie) { cookie = proxyCookie; }};module.exports = function(app) { // ... // 프록시 설정 app.use( proxy( [ '/', ], { // 대상서버 target: 'http://localhost:8080' , secure: false, // disable SSL verification //changeOrigin: true, // for vhosted sites, changes host header to match to target's host ws : true, // websock on onProxyReq: relayRequestHeaders, onProxyRes: relayResponseHeaders, // ajax 혹은 통신이 있을경우에 로그에 표시 // logLevel: 'debug' } ) );};","link":"/2019/07/19/react-proxy-server-설정/"},{"title":"react 에서 package.json 내의 버젼정보 가져오기","text":"루트 폴더에 .env 파일 생성후에 다음항목 입력 12REACT_APP_VERSION=$npm_package_versionREACT_APP_NAME=$npm_package_name react app 재시작 후에 임의의 파일에 넣고 테스트 1console.log(`${process.env.REACT_APP_NAME} ${process.env.REACT_APP_VERSION}`)","link":"/2019/09/06/react-에서-package-json-내의-버젼정보-가져오기/"},{"title":"revealjs 에서 pdf 출력","text":"revealjs 페이지 에서 다음 주소를 추가1https://100milliongold.github.io/presentation/reveal.js.html?print-pdf https://100milliongold.github.io/presentation/reveal.js.html?print-pdf","link":"/2019/05/20/revealjs-에서-pdf-출력/"},{"title":"setState() 제어","text":"react.js 을 이용하다 보면 상태변경을 위하여 setState() 을 자주 사용하게 된다. 하지만 setState() 메서드는 비동기 형식이기 때문에 순서를 제어하기 힘들다. 만약 setState() 을 사용후에 별도의 메서드를 실행할려도 할때 다음처럼 이용하면 된다. 예시 12345this.setState({ setLoading: true,}, ()=&gt;{ setTimeout(this.setState({ setLoading: false, }), 1000);})","link":"/2019/07/18/setState-제어/"},{"title":"spring boot 을 influxDB 와 연동하기","text":"요구사항 spring boot : 1.5.10.RELEASE 이상 jdk : 1.8 이상 influxDB : 2.7 influxDB 설치 docker 에서 설치12docker pull influxdbdocker run --name influxdb-test -p8086:8086 -d influxdb 샘플 데이터 생성하기 influxDB 접속 1234docker exec -it influxdb-test /bin/bashinflux -precision rfc3339Connected to http://localhost:8086 version 1.4.xInfluxDB shell 1.4.x 데이터베이스 생성 12CREATE DATABASE NOAA_water_databaseexit 샘플 데이터 다운받기 1curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt 데이터를 influxDB 에 import 하기 1influx -import -path=NOAA_data.txt -precision=s -database=NOAA_water_database 테스트 하기 123influx -precision rfc3339use NOAA_water_databaseSELECT * FROM h2o_feet LIMIT 5 spring boot 에 연동하기 spring boot 프로젝트 생성 pom.xml 설정 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;influxDB-Test&lt;/artifactId&gt; &lt;version&gt;0.1.0&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.5.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.influxdb&lt;/groupId&gt; &lt;artifactId&gt;influxdb-java&lt;/artifactId&gt; &lt;version&gt;2.14&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miwurster&lt;/groupId&gt; &lt;artifactId&gt;spring-data-influxdb&lt;/artifactId&gt; &lt;version&gt;1.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; spring configure 설정 (InfluxDBConfiguration.java) 123456789101112131415161718192021222324252627282930@Configuration@EnableConfigurationProperties(InfluxDBProperties.class)public class InfluxDBConfiguration{ @Bean public InfluxDBConnectionFactory connectionFactory(final InfluxDBProperties properties) { return new InfluxDBConnectionFactory(properties); } @Bean public InfluxDBTemplate&lt;Point&gt; influxDBTemplate(final InfluxDBConnectionFactory connectionFactory) { /* * You can use your own 'PointCollectionConverter' implementation, e.g. in case * you want to use your own custom measurement object. */ return new InfluxDBTemplate&lt;&gt;(connectionFactory, new PointConverter()); } @Bean public DefaultInfluxDBTemplate defaultTemplate(final InfluxDBConnectionFactory connectionFactory) { /* * If you are just dealing with Point objects from 'influxdb-java' you could * also use an instance of class DefaultInfluxDBTemplate. */ return new DefaultInfluxDBTemplate(connectionFactory); }} application.properties 설정 1234spring.influxdb.url=http://localhost:8086spring.influxdb.database=NOAA_water_databasespring.influxdb.username=~spring.influxdb.retentionPolicy=autogen DTO 생성(H2oFeet.java) 12345678910111213141516171819202122232425262728293031323334353637@Measurement(name = \"h2o_feet\")public class H2oFeet { @Column(name = \"water_level\") private Double water_level; @Column(name = \"level description\") private String level_description; @Column(name = \"location\") private String location; @Column(name = \"time\") private Instant time; public Double getWater_level() { return water_level; } public void setWater_level(Double water_level) { this.water_level = water_level; } public String getLevel_description() { return level_description; } public void setLevel_description(String level_description) { this.level_description = level_description; } public String getLocation() { return location; } public void setLocation(String location) { this.location = location; } public Instant getTime() { return time; } public void setTime(Instant time) { this.time = time; }} controller 생성 (MainController.java) 12345678910111213141516@Controller@RequestMapping(path=\"/api/v1/NOAAWater\")public class MainController { @Autowired private MainService mainService; @GetMapping(path=\"/h2os\") public @ResponseBody List&lt;H2oFeet&gt; h2o_list() { return mainService.h2o_list(); }} service 생성 (MainService.java) 1234567891011121314151617181920@Servicepublic class MainService { @Autowired private InfluxDBTemplate&lt;Point&gt; influxDBTemplate; public List&lt;H2oFeet&gt; h2o_list() { Query query = QueryBuilder.newQuery(\"SELECT * FROM h2o_feet LIMIT 1000\") .forDatabase(\"NOAA_water_database\") .create(); QueryResult queryResult = influxDBTemplate.query(query); InfluxDBResultMapper resultMapper = new InfluxDBResultMapper(); // thread-safe - can be reused return resultMapper.toPOJO(queryResult, H2oFeet.class); }} Test curl1$curl -X GET http://localhost:8080/api/v1/NOAAWater/h2os github : https://github.com/gadian88/influxDB-Test","link":"/2019/02/10/spring-boot-을-influxDB-와-연동하기/"},{"title":"ssh port forwording","text":"local 1ssh -L 80:intra.example.com:80 gw.example.com remote 1ssh -R 8080:localhost:80 public.example.com 이를 이용하여 ssh 을 통하여 port 포워딩이 가능해진다.","link":"/2019/04/17/ssh-port-forwording/"},{"title":"ubuntu jupyter-notekook 설치","text":"ubuntu jupyter notebook (python3) 설치1. python3 install1$sudo apt install python3 2. pip3 install1$sudo apt install python3-pip 3. ipython3 install1sudo apt install ipython3 4. jupyter-notebook install1sudo apt install jupyter-notebook 5. start jupyter-notebook1jupyter-notebook","link":"/2019/03/09/ubuntu-jupyter-notekook-설치/"},{"title":"ubuntu 에서 Netflix 시청하기","text":"ubuntu 에서 Netflix 시청하기우분투에서 넷플릭스을 시청시 다음과 화면이 나오면서 재생이 안되는 경우가 발생한다. 이럴경우 다음과 같이 조치한다 1. Firefox 에서 DRM 설정하기Firefox 에서 DRM 제어 콘텐츠 재생 체크하기 2. extra codecs 설치하기1$ sudo apt install libavcodec-extra","link":"/2019/03/10/ubuntu-에서-Netflix-시청하기/"},{"title":"pip cannot import name main 에러날때","text":"pip install 실행간 ImportError: cannot import name ‘main’ 에러발생원인ubuntu 에서 apt install python-pip 인스톨후에 sudo pip install pip –upgrade 함 증상pip 실행간 다음과 같은 에러발생12345guru@guru-notebook:~$ pip3 install numpyTraceback (most recent call last): File &quot;/usr/bin/pip3&quot;, line 9, in &lt;module&gt; from pip import mainImportError: cannot import name &apos;main&apos; 해결다음 명령어를 실행 (참고 : Error after upgrading pip: cannot import name ‘main’)1sudo python3 -m pip uninstall pip &amp;&amp; sudo apt install python3-pip --reinstall","link":"/2019/03/09/ubuntu-에서-pip3-가-pip-cannot-import-name-main-에러날때/"},{"title":"vagrant box 저장위치 설정","text":".bashrc 파일에 다음과 같이 설정1export VAGRANT_HOME=/media/master/vagrant","link":"/2019/01/11/vagrant-box-저장위치-설정/"},{"title":"yarn 캐쉬 지우기","text":"가끔 맵리듀스 작업을 하다보면, yarn 에 캐쉬가 많이 남아 있어서 충돌이 발생하는 경우가 발생한다. 초기화을 하자 yarn cache 저장위치 확인하기yarn-site.xml 파일에 yarn.nodemanager.local-dirs 위치 확인하기 1234&lt;property&gt; &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt; &lt;value&gt;/hadoop/yarn/local&lt;/value&gt;&lt;/property&gt; 해당 폴더의 내용 지우기123[yarn@node2 ~]$ cd /hadoop/yarn/local/[yarn@node2 local]$ ls filecache nmPrivate spark_shuffle usercache[yarn@node2 local]$ rm -rf filecache/ usercache/ yarn 재시작","link":"/2019/02/24/yarn-캐쉬-지우기/"},{"title":"맥에서 sshpass 이용하기","text":"맥에서 sshpass 을 설치하기 위해서는 콘솔창에서 다음 명령어로 설치한다.1$ brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb","link":"/2019/03/23/맥에서-sshpass-이용하기/"},{"title":"webpack devserver proxy 설정법","text":"webpack devserver proxy 설정법package.json 파일에서 “proxy”: “http://localhost:” 설정한다 package.json 예시 1234567891011121314151617{ \"name\": \"client\", \"version\": \"0.1.0\", \"private\": true, \"dependencies\": { \"react\": \"^16.3.2\", \"react-dom\": \"^16.3.2\", \"react-scripts\": \"1.1.4\" }, \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test --env=jsdom\", \"eject\": \"react-scripts eject\" }, \"proxy\": \"http://localhost:&lt;PORT-GOES-HERE&gt;\"}","link":"/2019/02/24/webpack-devserver-proxy-설정법/"},{"title":"vscode 특정폴더 숨기기","text":"설정 vscode 설정창으로 이동 사용자 설정에서 검색창에 exclude 을 입력후에 Files.Execlude 항목에서 숨길 폴더 추가","link":"/2019/07/26/vscode-특정폴더-숨기기/"},{"title":"우분투 18.04 최대절전모드 활성화","text":"최대절전모드 확인 터미널 창에서 다음 명령어로 최대절전모드가 작동이 되는지 확인 1sudo systemctl hibernate 그놈메뉴에 최대절전모드 활성화 하기 터미널창에 다음 명령어를 입력하여 환경설정 파일 열기 1sudo gedit /etc/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla 파일에 다음과 같은 내용을 입력 123456789[Re-enable hibernate by default in upower]Identity=unix-user:*Action=org.freedesktop.upower.hibernateResultActive=yes[Re-enable hibernate by default in logind]Identity=unix-user:*Action=org.freedesktop.login1.hibernate;org.freedesktop.login1.handle-hibernate-key;org.freedesktop.login1;org.freedesktop.login1.hibernate-multiple-sessions;org.freedesktop.login1.hibernate-ignore-inhibitResultActive=yes 시스템 재시작 및 그놈 확장 설치 : Hibernate Status Button.","link":"/2019/02/24/우분투-18-04-최대절전모드-활성화/"},{"title":"지뢰찾기 구현","text":"the-mine-sweeperReact.js 을 이용하여 만든 지뢰찾기 입니다. 실행 방법 node.js , npm 을 설치 합니다. the-mine-sweeper 폴더로 이동후에 다음 명령어를 실행합니다. 1$ npm install node module 을 설치 하고 나서 다음 명령어를 입력하여 dev server 을 실행합니다. 1$ npm start 권장 사항 최신 버젼의 Chrome, Firefox, Safari, Edge 에서 실행을 권장합니다. 빌드방법 the-mine-sweeper 폴더로 이동후에 다음 명령어를 실행합니다. 1$ npm run build the-mine-sweeper/build 폴더내의 파일들을 웹서버에 업로드 합니다. 만약 직접 실행할경우 다음 명령어를 입력합니다. 12$ npm install -g serve$ serve -s build Example다음 홈페이지에 접속하면 실제 페이지를 볼수 있습니다. https://hardwooooooork.github.io/the-mine-sweeper/","link":"/2019/07/18/지뢰찾기-구현/"}],"tags":[{"name":"server","slug":"server","link":"/tags/server/"},{"name":"reactjs","slug":"reactjs","link":"/tags/reactjs/"},{"name":"front-end","slug":"front-end","link":"/tags/front-end/"},{"name":"ambari, hadoop, server, linux","slug":"ambari-hadoop-server-linux","link":"/tags/ambari-hadoop-server-linux/"},{"name":"Arch Linux","slug":"Arch-Linux","link":"/tags/Arch-Linux/"},{"name":"manjaro","slug":"manjaro","link":"/tags/manjaro/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Ambari","slug":"Ambari","link":"/tags/Ambari/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"hadoop","slug":"hadoop","link":"/tags/hadoop/"},{"name":"ambari","slug":"ambari","link":"/tags/ambari/"},{"name":"Hadoop","slug":"Hadoop","link":"/tags/Hadoop/"},{"name":"Error","slug":"Error","link":"/tags/Error/"},{"name":"Server","slug":"Server","link":"/tags/Server/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"linix","slug":"linix","link":"/tags/linix/"},{"name":"Centos","slug":"Centos","link":"/tags/Centos/"},{"name":"troubleshooting","slug":"troubleshooting","link":"/tags/troubleshooting/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"SELinux","slug":"SELinux","link":"/tags/SELinux/"},{"name":"CentOS","slug":"CentOS","link":"/tags/CentOS/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"hadoop, server, linux, hbase","slug":"hadoop-server-linux-hbase","link":"/tags/hadoop-server-linux-hbase/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"spring boot","slug":"spring-boot","link":"/tags/spring-boot/"},{"name":"vagrant","slug":"vagrant","link":"/tags/vagrant/"},{"name":"virsualbox","slug":"virsualbox","link":"/tags/virsualbox/"},{"name":"spring security","slug":"spring-security","link":"/tags/spring-security/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"-server -arch linux -manjaro","slug":"server-arch-linux-manjaro","link":"/tags/server-arch-linux-manjaro/"},{"name":"react.js","slug":"react-js","link":"/tags/react-js/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"docker, server, linux","slug":"docker-server-linux","link":"/tags/docker-server-linux/"},{"name":"elementaryOS","slug":"elementaryOS","link":"/tags/elementaryOS/"},{"name":"eclipse","slug":"eclipse","link":"/tags/eclipse/"},{"name":"freebsd","slug":"freebsd","link":"/tags/freebsd/"},{"name":"gnome","slug":"gnome","link":"/tags/gnome/"},{"name":"vitualbox","slug":"vitualbox","link":"/tags/vitualbox/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"dev","slug":"dev","link":"/tags/dev/"},{"name":"gitlab","slug":"gitlab","link":"/tags/gitlab/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"error","slug":"error","link":"/tags/error/"},{"name":"spark","slug":"spark","link":"/tags/spark/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"mybatis","slug":"mybatis","link":"/tags/mybatis/"},{"name":"pip","slug":"pip","link":"/tags/pip/"},{"name":"fron-end","slug":"fron-end","link":"/tags/fron-end/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"revealjs","slug":"revealjs","link":"/tags/revealjs/"},{"name":"influxDB","slug":"influxDB","link":"/tags/influxDB/"},{"name":"Netflix","slug":"Netflix","link":"/tags/Netflix/"},{"name":"server, linux, hadoop, hadoop-yarn","slug":"server-linux-hadoop-hadoop-yarn","link":"/tags/server-linux-hadoop-hadoop-yarn/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"sshpass","slug":"sshpass","link":"/tags/sshpass/"},{"name":"webpack","slug":"webpack","link":"/tags/webpack/"},{"name":"ubuntu, linux, server","slug":"ubuntu-linux-server","link":"/tags/ubuntu-linux-server/"}],"categories":[]}